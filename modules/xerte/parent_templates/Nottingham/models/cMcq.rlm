	<PG title="Multiple Choice Connector" name="Connector MCQ">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();if (rootIcon.projMode == "dev"){// Page Wizard   pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];    // routed pages only  pageID_array = new Array();  pageTitle_array = new Array();    for (i = 0; i < rootIcon.pages.length; i++){    pageID_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.pageID);    pageTitle_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.name);  }  navOffset = 0;    } else {  // Toolkits    myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();    // routed pages only  pageID_array = new Array();   pageTitle_array = new Array();   for (i = 0; i < extXML.firstChild.childNodes.length; i++){    pageID_array.push(extXML.firstChild.childNodes[i].attributes.linkID);    pageTitle_array.push(extXML.firstChild.childNodes[i].attributes.name);  }  navOffset = pgOffset - 1;  }  rootIcon.setTitleText(templateData.learningObject[0].name);// handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.cMcq[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }   ]]></SCR>		<SCR isFunc="1" id="fnListToClipboard" name="fnListToClipboard"><![CDATA[// outputs a list of page titles and page ids to the clipboardclipBoardText = "";if (reportStyle == "text"){  for (i = 0; i < pageID_array.length; i++){     // output a list of titles and pageIDs    clipBoardText = clipBoardText + pageLabel + " " + (i + 1) + " " + titleLabel + " " + pageTitle_array[i] + " | " + idLabel + " " + pageID_array[i] + chr(13) + chr(10);  }  System.setClipboard(clipBoardText);} else if (reportStyle == "html"){// html versionclipBoardText = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<html><head><title>' + reportTitle + '</title></head><body>';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<table border="1" cellpadding="5">' + chr(13) + chr(10);clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + pageLabel + '</td><td bgcolor="lightgreen">' + titleLabel + '</td><td bgcolor="lightblue">' + idLabel + '</td></tr>' + chr(13) + chr(10);  for (i = 0; i < pageID_array.length; i++){      clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + (i + 1) + '</td><td bgcolor="lightgreen">' + pageTitle_array[i] + '</td><td bgcolor="lightblue">' + pageID_array[i]  + '</td></tr>' + chr(13) + chr(10);  }  clipBoardText = clipBoardText + '</table></body></html>' + chr(13) + chr(10);  System.setClipboard(clipBoardText);} else {  // do nothing}]]></SCR>		<SCR name="set up"><![CDATA[reportTitle = pageIcon.templateData.cMcq[projPI].reportTitle;pageLabel = pageIcon.templateData.cMcq[projPI].pageLabel;titleLabel = pageIcon.templateData.cMcq[projPI].titleLabel;idLabel = pageIcon.templateData.cMcq[projPI].idLabel;notFoundMessage = pageIcon.templateData.cMcq[projPI].notFoundMessage;notSetMessage = pageIcon.templateData.cMcq[projPI].notSetMessage;// set text stringsconfirmBtnTxt = pageIcon.templateData.cMcq[projPI].confirmBtnTxt;confirmBtnTip = pageIcon.templateData.cMcq[projPI].confirmBtnTip;if (pageIcon.templateData.cMcq[projPI].confirmBtnWidth != undefined){  confirmBtnWidth = pageIcon.templateData.cMcq[projPI].confirmBtnWidth;} else {  confirmBtnWidth = "100";}		align = pageIcon.templateData.cMcq[projPI].align;if (templateData.learningObject[0].authorSupport == "true"){  pageMode = "development";} else {  pageMode = "live";}  if ((pageMode == "development") && (pageIcon.templateData.cMcq[projPI].listToClip != undefined)){  reportStyle = pageIcon.templateData.cMcq[projPI].listToClip;  fnListToClipboard();}panelWidth = pageIcon.templateData.cMcq[projPI].panelWidth;if (panelWidth == "Small"){  panelW = 300;  textW = 440;} else if (panelWidth == "Medium"){  panelW = 450;  textW = 290;} else if (panelWidth == "Large"){  panelW = 600;  textW = 140;} else {  panelW = 760;  textW = 0;}if (pageIcon.templateData.cMcq[projPI].narration != undefined){  narration = pageIcon.templateData.cMcq[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<DIS w="panelW " h="474" tabIndex="-1" id="panel" name="panel" x="align == 'Right' ? 20 : textW + 40" y="20" type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>		<DIS name="instruction" x="align == 'Right' ? panel._x + panelW + 20 : 20" y="panel._y" w="textW" h="10" type="text"><![CDATA[{pageIcon.templateData.cMcq[projPI].instruction}]]></DIS>		<DIS textColour="#000000" id="prpt" name="question" x="panel._x + 20" y="panel._y + 20" w="panelW - 40" h="10" type="text"><![CDATA[{pageIcon.templateData.cMcq[projPI].prompt}]]></DIS>		<SCR name="makeOptions"><![CDATA[ln = pageIcon.templateData.cMcq[projPI].cOption.length;optionTracking = new Array();if (icon.attributes.built != "true"){  icon.nextSibling.childNodes[1].duplicate(pageIcon.templateData.cMcq[projPI].cOption.length - 2);  icon.attributes.built = "true";}]]></SCR>		<INT id="ques" name="buttonInteraction" perpetual="1">			<RES w="panelW - 60" textColour="#000000" name="protoOption" type="radio" x="prpt._x" y="prpt._y + prpt._height + 30" label="{pageIcon.templateData.cMcq[projPI].cOption[icon.index()].text}" group="grp" erase="1" exit="0">				<SCR name="trackAnswers"><![CDATA[//track the question  for (i = 0; i < ln; i++){    optionTracking[i] = 0;  }  optionTracking[icon.parentNode.index()] = 1;btnSubmit.setEnabled(true);]]></SCR>			</RES>			<RES w="panelW - 60" textColour="#000000" name="protoOption" type="radio" x="prpt._x" y="_ytile + 13" label="{pageIcon.templateData.cMcq[projPI].cOption[icon.index()].text}" group="grp" erase="1" exit="0">				<SCR name="trackAnswers"><![CDATA[//track the question  for (i = 0; i < ln; i++){    optionTracking[i] = 0;  }  optionTracking[icon.parentNode.index()] = 1;btnSubmit.setEnabled(true);]]></SCR>			</RES>			<RES w="confirmBtnWidth" toolTip="{confirmBtnTip}" enabled="0" rs="btnSubmit" swf="templatePath + 'common/button.swf'" name="button" type="button" x="prpt._x" y="_ytile + 10" label="{confirmBtnTxt}" erase="1" exit="0">				<SCR name="goToDestination"><![CDATA[//locate destination of selected questionfor (i = 0; i < ln; i++){  if (optionTracking[i] == 1){    // found selected answer    destPageName = pageIcon.templateData.cMcq[projPI].cOption[i].destination;  }}pageFound = "false";if ((destPageName == undefined) || (destPageName == "")) {  // pageID not specified message  txtPageNotFound.setText(notSetMessage);} else {  // a destination has been specified     // navigate to destination page  for (i = 0; i < pageID_array.length; i++){	    if (pageID_array[i] == destPageName){		  pageFound = "true";		  destinationIndex = i;      // go to destination page 	  rootIcon.gotoPage(destinationIndex + navOffset);  		  break;	    }  }  if (pageFound == "false"){    // pageID was set but not found    txtPageNotFound.setText(idLabel + "<br>" + destPageName + "<br>" + notFoundMessage)  }}if ((pageMode == "development") && (pageFound == "false")){// set up page not found text box  txtPageNotFound.clear();  txtPageNotFound.beginFill(0xFFFFCC, 100);  txtPageNotFound.lineStyle(1,0x000000,100);  txtPageNotFound.drawRect(-10,-10,250,200,20);  txtPageNotFound._visible = 1;  txtPageNotFound.wipe('in',0.25,'Strong','easeIn',2) }]]></SCR>			</RES>		</INT>		<SCR name="define Development info"><![CDATA[// this script must run before the routingInfo text icon, otherwise the update of the text property// takes place to late and the destination display for the first tab is undefined// the second tab shows the first tabs destinations etc.if (pageMode == "development"){  // only show destination information in development mode  routingInfoText = "";  routingInfoX = 0;  maxTextLength = 0  // loop through options and find longest option text whilst building up routing information for this tab  for (i = 0; i < ln; i++){    if (Number(pageIcon.templateData.cMcq[projPI].cOption[i].text.length) > maxTextLength){      maxTextLength = pageIcon.templateData.cMcq[projPI].cOption[i].text.length;    }    routingInfoText = routingInfoText + "<li>" + pageIcon.templateData.cMcq[projPI].cOption[i].destination + "</li><br>";  }  // position destination information  // maxTextLength is in characters - need to add a multiplier to allow for character width  maxTextLength = maxTextLength * 6.5;  routingInfoX += maxTextLength + Number(prpt._x) + 45;  routingInfoY = Number(prpt._y) + Number(prpt._height) + 26;} ]]></SCR>		<DIS textColour="#FF0000" id="routingInfo" name="routingInfo" x="0" y="0" w="400" h="400" type="text"><![CDATA[{routingInfoText}]]></DIS>		<DIS embedVars="1" textColour="#FF0000" textSize="20" id="txtPageNotFound" name="txtPageNotFound" x="panel._x + 10 + ((panelW -180) / 2)" y="panel._y + ((474 - 80) / 2)" w="180" h="80" type="text"><![CDATA[]]></DIS>		<SCR name="finalTidyUp"><![CDATA[// set up page not found text boxtxtPageNotFound.beginFill(0xFFFFCC, 100);txtPageNotFound.lineStyle(1,0x000000,100);txtPageNotFound.drawRect(-10,-10,200,150,20);txtPageNotFound.dropShadow(7,45,0x999999,50);txtPageNotFound._visible = 0;// position and display the routing data if in development modeif (pageMode == "development"){  // must set properties after the icon routingInfo is defined in the project tree  routingInfo._x = routingInfoX;  routingInfo._y = routingInfoY;  routingInfo._visible = true;}else {  // hide routing info as this is live usage   routingInfo._visible = false;}]]></SCR>	</PG>