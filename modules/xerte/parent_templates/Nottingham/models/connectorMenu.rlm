	<PG title="Menu Connector" name="Menu Connector">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();   if (rootIcon.projMode == "dev"){// Page Wizard   pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];    // routed pages only  pageID_array = new Array();  pageTitle_array = new Array();    for (i = 0; i < rootIcon.pages.length; i++){    pageID_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.pageID);    pageTitle_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.name);  }  navOffset = 0;  } else {  // Toolkits    myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();  // routed pages only  pageID_array = new Array();   pageTitle_array = new Array();    for (i = 0; i < extXML.firstChild.childNodes.length; i++){    pageID_array.push(extXML.firstChild.childNodes[i].attributes.linkID);    pageTitle_array.push(extXML.firstChild.childNodes[i].attributes.name);  }	  navOffset = pgOffset - 1;}  rootIcon.setTitleText(templateData.learningObject[0].name);// handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.connectorMenu[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }     if (pageIcon.templateData.connectorMenu[projPI].narration != undefined){  narration = pageIcon.templateData.connectorMenu[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<SCR isFunc="1" id="fnListToClipboard" name="fnListToClipboard"><![CDATA[// outputs a list of page titles and page ids to the clipboardclipBoardText = "";if (reportStyle == "text"){  for (i = 0; i < pageID_array.length; i++){     // output a list of titles and pageIDs    clipBoardText = clipBoardText + pageLabel + " " + (i + 1) + " " + titleLabel + " " + pageTitle_array[i] + " | " + idLabel + " " + pageID_array[i] + chr(13) + chr(10);  }  System.setClipboard(clipBoardText);} else if (reportStyle == "html"){// html versionclipBoardText = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<html><head><title>' + reportTitle + '</title></head><body>';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<table border="1" cellpadding="5">' + chr(13) + chr(10);clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + pageLabel + '</td><td bgcolor="lightgreen">' + titleLabel + '</td><td bgcolor="lightblue">' + idLabel + '</td></tr>' + chr(13) + chr(10);  for (i = 0; i < pageID_array.length; i++){      clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + (i + 1) + '</td><td bgcolor="lightgreen">' + pageTitle_array[i] + '</td><td bgcolor="lightblue">' + pageID_array[i]  + '</td></tr>' + chr(13) + chr(10);  }  clipBoardText = clipBoardText + '</table></body></html>' + chr(13) + chr(10);  System.setClipboard(clipBoardText);} else {  // do nothing}]]></SCR>		<SCR name="set up"><![CDATA[// set up coloursif (pageIcon.templateData.connectorMenu[projPI].menuLineCol == undefined){  menuLineCol = STYLES.titleBarColour;} else {  menuLineCol = pageIcon.templateData.connectorMenu[projPI].menuLineCol;}if (pageIcon.templateData.connectorMenu[projPI].menuOverLineCol == undefined){  menuOverLineCol = STYLES.statusBarColour;} else {  menuOverLineCol = pageIcon.templateData.connectorMenu[projPI].menuOverLineCol;}if (pageIcon.templateData.connectorMenu[projPI].menuFillCol == undefined){  menuFillCol = "0xFFFFFF";} else {  menuFillCol = pageIcon.templateData.connectorMenu[projPI].menuFillCol;}if (pageIcon.templateData.connectorMenu[projPI].menuOverFillCol == undefined){  menuOverFillCol = "0xFFFFFF";} else {  menuOverFillCol = pageIcon.templateData.connectorMenu[projPI].menuOverFillCol;}// set up text stringsreportTitle = pageIcon.templateData.connectorMenu[projPI].reportTitle;pageLabel = pageIcon.templateData.connectorMenu[projPI].pageLabel;titleLabel = pageIcon.templateData.connectorMenu[projPI].titleLabel;idLabel = pageIcon.templateData.connectorMenu[projPI].idLabel;if (templateData.learningObject[0].authorSupport == "true"){  pageMode = "development";} else {  pageMode = "live";} if ((pageMode == "development") && (pageIcon.templateData.connectorMenu[projPI].listToClip != undefined)){  reportStyle = pageIcon.templateData.connectorMenu[projPI].listToClip;  fnListToClipboard();}]]></SCR>		<SCR name="prep layout and menu data"><![CDATA[// set up positioning values// user optionsif (pageIcon.templateData.connectorMenu[projPI].itemSpacingX == undefined){  colMargin = 30; // spacing between menu items} else {  colMargin = parseInt(pageIcon.templateData.connectorMenu[projPI].itemSpacingX);}if (pageIcon.templateData.connectorMenu[projPI].itemSpacingY == undefined){  itemSpacingY = 5; // spacing between menu items} else {  itemSpacingY = parseInt(pageIcon.templateData.connectorMenu[projPI].itemSpacingY);}if (pageIcon.templateData.connectorMenu[projPI].itemHeight == undefined){  itemHeight = 25; // spacing between menu items} else {  itemHeight = parseInt(pageIcon.templateData.connectorMenu[projPI].itemHeight);}pageHeight = rootIcon.h - (rootIcon.statusBarHeight + rootIcon.titleBarHeight + rootIcon.titleBannerHeight);// allow margin top and bottommaxHeight = pageHeight - (2 * colMargin);// prepare menu data// build menu arraymenuArray = new Array();menuArray.pageTitle = new Array(); // for page titlesmenuArray.pageIndex = new Array(); // for page index// new code using child nodes for listed menuif (pageIcon.templateData.connectorMenu[projPI].cMenuListedPage.length > 0){  listBasedMenu="true";} else { // ordinary menu  listBasedMenu="false";  // first menu item  if (pageIcon.templateData.connectorMenu[projPI].startPageID == undefined || pageIcon.templateData.connectorMenu[projPI].startPageID == "" ){    startIndex = 0;  } else {    // new code using linkID    for (i = 0; i < pageID_array.length; i++){      startIndex = 0;      if (pageIcon.templateData.connectorMenu[projPI].startPageID == pageID_array[i]){        startIndex = i;        break;      }    }  }  // last menu item  if (pageIcon.templateData.connectorMenu[projPI].endPageID == undefined || pageIcon.templateData.connectorMenu[projPI].endPageID == "" ){    endIndex = pageID_array.length;  } else {    // new code using linkID    for (i = 0; i < pageID_array.length; i++){      endIndex = pageID_array.length;      if (pageIcon.templateData.connectorMenu[projPI].endPageID == pageID_array[i]){        endIndex = i + 1;        break;      }    }  }    }if (listBasedMenu == "true"){  // find page index for each listed page ID  // new code using linkID from child nodes  k = 0;  for (i = 0; i < pageIcon.templateData.connectorMenu[projPI].cMenuListedPage.length; i++){    for (j = 0; j < pageID_array.length; j++){      if (pageIcon.templateData.connectorMenu[projPI].cMenuListedPage[i].pageID == pageID_array[j]){        menuArray.pageTitle[k] = pageTitle_array[j];        menuArray.pageIndex[k] = j;        k++;        break;      }          }      }} else {  i = 0;  for (j = startIndex; j < endIndex; j++){    menuArray.pageTitle[i] = pageTitle_array[j];    menuArray.pageIndex[i] = j;    i++;  }}calcHeight = itemHeight + itemSpacingY;itemsPerCol = Math.floor(maxHeight / calcHeight);numItems = menuArray.pageTitle.length;numCols = Math.ceil(numItems / itemsPerCol);multiplier = numCols + 1;maxWidth = rootIcon.w - (multiplier * colMargin);itemWidth = Math.floor(maxWidth / numCols);textStringLimit = Math.floor(itemWidth / 7); // limit menu item text to width of menu item]]></SCR>		<SCR name="makeMenu"><![CDATA[if (icon.attributes.built != "true"){  icon.nextSibling.firstChild.duplicate(numItems - 1);  icon.attributes.built = "true";}]]></SCR>		<DEC id="items" name="menu" repeat="all" branch="sequence" pause="0" erase="0" eraseOnExit="0">			<PG name="items">				<SCR name="setID"><![CDATA[icon.nextSibling.attributes.id = 'it' + icon.parentNode.index();]]></SCR>				<DIS textSize="12" textColour="0x333333" id="menuItem" name="protoItem" x="colMargin + Math.floor(icon.parentNode.index() / itemsPerCol) * (itemWidth + colMargin)" y="calcHeight + Math.floor(icon.parentNode.index() % itemsPerCol) * calcHeight" w="itemWidth" h="itemHeight" type="text"><![CDATA[{menuArray.pageTitle[icon.parentNode.index()].substr(0,textStringLimit)}]]></DIS>				<SCR name="drawItem"><![CDATA[ic = engine['it' + icon.parentNode.index()];ic.txt.wordWrap = false;ic.lineStyle(2, menuLineCol, 100);ic.beginFill(menuFillCol, 100);ic.drawRect(-5,-5,itemWidth,itemHeight,4);for (i = 0; i < icon.nextSibling.childNodes.length; i++){  icon.nextSibling.childNodes[i].attributes.icon = 'it'+icon.parentNode.index();}]]></SCR>				<INT name="events" perpetual="1">					<RES name="onRollOver" type="event" eventName="onRollOver" icon="menuItem" erase="1" exit="0">						<SCR name="redraw"><![CDATA[ic = eval(icon.parentNode.attributes.icon);ic.lineStyle(2, menuOverLineCol, 100);ic.beginFill(menuOverFillCol, 100);ic.drawRect(-5,-5,itemWidth,itemHeight,4);]]></SCR>					</RES>					<RES name="onRollOut" type="event" eventName="onRollOut" icon="item" erase="1" exit="0">						<SCR name="redraw"><![CDATA[ic = eval(icon.parentNode.attributes.icon);ic.lineStyle(2, menuLineCol, 100);ic.beginFill(menuFillCol, 100);ic.drawRect(-5,-5,itemWidth,itemHeight,4);]]></SCR>					</RES>					<RES name="onReleaseOutside" type="event" eventName="onReleaseOutside" icon="item" erase="1" exit="0">						<SCR name="redraw"><![CDATA[ic = eval(icon.parentNode.attributes.icon);ic.lineStyle(2, menuLineCol, 100);ic.beginFill(menuFillCol, 100);ic.drawRect(-5,-5,itemWidth,itemHeight,4);]]></SCR>					</RES>					<RES name="onRelease" type="event" eventName="onRelease" icon="item" erase="1" exit="0">						<SCR name="navigate"><![CDATA[// navigate to selected pageif (listBasedMenu == "true"){  destinationIndex = menuArray.pageIndex[items.getPageIndex()];  rootIcon.gotoPage(destinationIndex + navOffset);  } else {  rootIcon.gotoPage(items.getPageIndex() + startIndex + navOffset );}]]></SCR>					</RES>				</INT>			</PG>		</DEC>	</PG>