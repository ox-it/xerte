	<PG title="Hotspot Image Connector" name="Hotspot Image Connector">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();   if (rootIcon.projMode == "dev"){// Page Wizard   pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];    // routed pages only  pageID_array = new Array();  pageTitle_array = new Array();    for (i = 0; i < rootIcon.pages.length; i++){    pageID_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.pageID);    pageTitle_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.name);  }  navOffset = 0;    } else {  // Toolkits    myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();    // routed pages only  pageID_array = new Array();   pageTitle_array = new Array();  for (i = 0; i < extXML.firstChild.childNodes.length; i++){    pageID_array.push(extXML.firstChild.childNodes[i].attributes.linkID);    pageTitle_array.push(extXML.firstChild.childNodes[i].attributes.name);  }	    navOffset = pgOffset - 1;  }  rootIcon.setTitleText(templateData.learningObject[0].name);  // handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.connectorHotspotImage[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }   ]]></SCR>		<SCR isFunc="1" id="fnListToClipboard" name="fnListToClipboard"><![CDATA[// outputs a list of page titles and page ids to the clipboardclipBoardText = "";if (reportStyle == "text"){  for (i = 0; i < pageID_array.length; i++){     // output a list of titles and pageIDs    clipBoardText = clipBoardText + pageLabel + " " + (i + 1) + " " + titleLabel + " " + pageTitle_array[i] + " | " + idLabel + " " + pageID_array[i] + chr(13) + chr(10);  }  System.setClipboard(clipBoardText);} else if (reportStyle == "html"){// html versionclipBoardText = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<html><head><title>' + reportTitle + '</title></head><body>';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<table border="1" cellpadding="5">' + chr(13) + chr(10);clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + pageLabel + '</td><td bgcolor="lightgreen">' + titleLabel + '</td><td bgcolor="lightblue">' + idLabel + '</td></tr>' + chr(13) + chr(10);  for (i = 0; i < pageID_array.length; i++){      clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + (i + 1) + '</td><td bgcolor="lightgreen">' + pageTitle_array[i] + '</td><td bgcolor="lightblue">' + pageID_array[i]  + '</td></tr>' + chr(13) + chr(10);  }  clipBoardText = clipBoardText + '</table></body></html>' + chr(13) + chr(10);  System.setClipboard(clipBoardText);} else {  // do nothing}]]></SCR>		<SCR name="initial setup"><![CDATA[// set up positioning valuespageHeight = rootIcon.h - (rootIcon.statusBarHeight + rootIcon.titleBarHeight + rootIcon.titleBannerHeight);colMargin = "30"; // margin around edge and between image and textborderVal = "10"; // margin between hotspot graphic and panel// allow margin top and bottommaxHeight = pageHeight - (2 * colMargin);// allow margin left, right and middlemaxWidth3 = rootIcon.w - (3 * colMargin);maxWidth2 = rootIcon.w - (2 * colMargin);textH = maxHeight;leftColx = colMargin;// set up text stringsreportTitle = pageIcon.templateData.connectorHotspotImage[projPI].reportTitle;pageLabel = pageIcon.templateData.connectorHotspotImage[projPI].pageLabel;titleLabel = pageIcon.templateData.connectorHotspotImage[projPI].titleLabel;idLabel = pageIcon.templateData.connectorHotspotImage[projPI].idLabel;notFoundMessage = pageIcon.templateData.connectorHotspotImage[projPI].notFoundMessage;notSetMessage = pageIcon.templateData.connectorHotspotImage[projPI].notSetMessage;continueBtnTxt = pageIcon.templateData.connectorHotspotImage[projPI].continueBtnTxt;continueBtnWidth = pageIcon.templateData.connectorHotspotImage[projPI].continueBtnWidth;hicol = pageIcon.templateData.connectorHotspotImage[projPI].hicol;if (templateData.learningObject[0].authorSupport == "true"){  pageMode = "development";} else {  pageMode = "live";} // send page titles and page ids to clipboard if requestedif ((pageMode == "development") && (pageIcon.templateData.connectorHotspotImage[projPI].listToClip != undefined)){  reportStyle = pageIcon.templateData.connectorHotspotImage[projPI].listToClip;  fnListToClipboard();}if (pageIcon.templateData.connectorHotspotImage[projPI].imageTransition != undefined){  imageTransition = pageIcon.templateData.connectorHotspotImage[projPI].imageTransition;  switch (imageTransition) {         case "blinds" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "blinds('in', 1, 'None', 'easeNone', 10, 3)";            break;         case "dissolve" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "dissolve('in', 1, 'None', 'easeNone', 100, 100)";                        break;        case "fade" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "fade('in', 1, 'None', 'easeNone')";                          break;        case "fly" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "fly('in', 1, 'None', 'easeNone', 6)";                           break;        case "iris" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "iris('in', 1, 'None', 'easeNone', 'circle')";                          break;        case "squeeze" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "squeeze('in', 1, 'None', 'easeNone', 0)";                        break;        case "wipe" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "wipe('in', 1, 'None', 'easeNone', 2)";             break;        case "zoom" :             icon.nextSibling.nextSibling.nextSibling.attributes.transition = "zoom('in', 1, 'None', 'easeNone')";                         break;                                                                                  default :             // no transition            break;     } }if (pageIcon.templateData.connectorHotspotImage[projPI].narration != undefined){  narration = pageIcon.templateData.connectorHotspotImage[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<DIS h="474" w="760" tabIndex="-1" id="panel" name="panel" x="20" y="20" type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>		<INT name="loadPanel" perpetual="0">			<RES name="onLoad" type="event" eventName="onLoad" icon="panel" erase="1" exit="1">				<SCR name="exit"><![CDATA[//ok to move onif (pageIcon.templateData.connectorHotspotImage[projPI].hidePanel == 'true'){  panel._alpha = 0;}]]></SCR>			</RES>		</INT>		<DIS toolTip="{pageIcon.templateData.connectorHotspotImage[projPI].tip}" scrolling="auto" id="graphic" name="graphic" x="coded" y="30 + topVOffset" type="ext" url="{pageIcon.templateData.connectorHotspotImage[projPI].url}"><![CDATA[{pageIcon.templateData.page[0].text[0].tip}]]></DIS>		<INT name="loadImage" perpetual="0">			<RES name="onLoad" type="event" eventName="onLoad" icon="graphic" erase="1" exit="1">				<SCR name="calculate"><![CDATA[//resize the image if it's too big or too widep = graphic._width / graphic._height;scale = 1;initHeight = graphic._height;initWidth = graphic._width;// establish maxWidth depending on image size actual, full screen or auto. if (pageIcon.templateData.connectorHotspotImage[projPI].textWidth == 'none'){  // no need for space between text and image as text not displayed  // image can take up all of screen width  graphic.constrain(maxWidth2, maxHeight);  textWidth = "0";} else if (pageIcon.templateData.connectorHotspotImage[projPI].textWidth == 'narrow'){  // text can only take up space left by image   textMin = "150";  graphicSpace = parseInt(maxWidth3 - textMin);  graphic.constrain(graphicSpace, maxHeight);  textWidth = parseInt(maxWidth3 - graphic._width); } else if (pageIcon.templateData.connectorHotspotImage[projPI].textWidth == 'wide'){  textMin = "250";  graphicSpace = parseInt(maxWidth3 - textMin);  graphic.constrain(graphicSpace, maxHeight);  textWidth = parseInt(maxWidth3 - graphic._width); } else {  // whats left if picture full size or constrained if to big  graphic.constrain(maxWidth3, maxHeight);  textWidth = parseInt(maxWidth3 - graphic._width);  }// adjust scalescale = graphic._width / initWidth;// set up positionif (pageIcon.templateData.connectorHotspotImage[projPI].textWidth == 'none'){  graphic._x = (rootIcon.w / 2) - (graphic._width / 2);  graphic._y = colMargin;} else {  if (pageIcon.templateData.connectorHotspotImage[projPI].align == 'Left'){    textX = colMargin;    textY = colMargin;    graphic._x = (colMargin * 2) + textWidth;    graphic._y = = colMargin;  } else {    // right align    textX = (colMargin * 2) + graphic._width;    textY = colMargin;    graphic._x = colMargin;    graphic._y = = colMargin;      }}  panel._x = graphic._x - borderVal;panel._y = graphic._y - borderVal;panel._width = graphic._width + (borderVal * 2);panel._height = graphic._height + (borderVal * 2);]]></SCR>			</RES>		</INT>		<DIS scrolling="auto" textColour="#333333" id="textBlock" h="textH" name="text" x="textX" y="textY" w="textWidth" type="text"><![CDATA[{pageIcon.templateData.connectorHotspotImage[projPI].text}]]></DIS>		<SCR name="set up popup"><![CDATA[// sets up position of pop up text display// check if x or y position specifiedif (pageIcon.templateData.connectorHotspotImage[projPI].popUpVAlign != undefined){  popUpVAlign = pageIcon.templateData.connectorHotspotImage[projPI].popUpVAlign;}else {  popUpVAlign = "middle"}  if (pageIcon.templateData.connectorHotspotImage[projPI].popUpHAlign != undefined){  popUpHAlign = pageIcon.templateData.connectorHotspotImage[projPI].popUpHAlign;}else {  popUpHAlign = "center"}// set up position of pop upputW = parseInt(maxWidth2 / 3);putH = parseInt(maxHeight / 3);switch (popUpVAlign) {  case "top":    putY = colMargin;    break;  case "bottom":    putY = (pageHeight - putH - colMargin - 30); // -30 allows for extra panel height to display button    break;  default: // middle    putY = (pageHeight / 2) - (putH / 2);}switch (popUpHAlign) {  case "left":    putX = colMargin;    break;  case "right":    putX = (stageWidth - putW - colMargin); // -50 allows for extra panel height to display button    break;  default: // center    putX = (stageWidth / 2) - (putW / 2);}]]></SCR>		<SCR name="makeHotspots"><![CDATA[hsData = pageIcon.templateData.connectorHotspotImage[projPI];if (pageIcon.templateData.connectorHotspotImage[projPI].highlight == 'true'){  icon.nextSibling.firstChild.attributes.highlight = '1';  icon.nextSibling.firstChild.attributes.highlightColour = hicol;}if (icon.attributes.built != "true"){  icon.nextSibling.firstChild.duplicate(pageIcon.templateData.connectorHotspotImage[projPI].cHotspot.length - 1);}icon.attributes.built = "true";currentHS = -1;]]></SCR>		<INT id="hspot" name="hotspots" perpetual="1">			<RES highlightColour="0xFF0000" name="protoHotpot" type="hotSpot" x="graphic._x + Number(hsData.cHotspot[icon.index()].x)*scale" y="graphic._y + Number(hsData.cHotspot[icon.index()].y)*scale" w="Number(hsData.cHotspot[icon.index()].w)*scale" h="Number(hsData.cHotspot[icon.index()].h)*scale" click="1" cursor="1" erase="1" exit="0">				<DIS h="474 - topVOffset" w="760" tabIndex="-1" id="panelH" name="panelH" x="20" y="20 " type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>				<INT name="loadPanel" perpetual="0">					<RES name="onLoad" type="event" eventName="onLoad" icon="panelH" erase="1" exit="1">						<SCR name="exit"><![CDATA[//ok to move onpanelH._alpha = 0;]]></SCR>					</RES>				</INT>				<SCR name="handleClick"><![CDATA[currentHS = icon.parentNode.index();hs = hspot.responses[icon.parentNode.index()];hspot.clear();// only run this if user wants to highlight selected hotspot.if (pageIcon.templateData.connectorHotspotImage[projPI].highlight == "true"){  hspot.lineStyle(2,hicol,100);  hspot.drawRect(hs._x, hs._y, hs._width, hs._height);}destPageName = hsData.cHotspot[icon.parentNode.index()].destination;// remove objects not needed in order last node first as deletion of earlier nodes will affect // the number of siblings between this script and the target node// 6th nodeif (hsData.cHotspot[icon.parentNode.index()].hotspotPopUp == undefined){  // delete the popup related objects  if (icon.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.nodeName == 'INT'){    icon.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.removeNode();  }}// 5th Nodeif (hsData.cHotspot[icon.parentNode.index()].hotspotSound == undefined){  if (icon.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.nodeName == 'INT'){    icon.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.removeNode();  }}// 4th to 2nd nodesif (hsData.cHotspot[icon.parentNode.index()].hotspotMovie == undefined){  // get rid of the movie related objects  if (icon.nextSibling.nextSibling.nextSibling.nextSibling.nodeName == 'INT'){    icon.nextSibling.nextSibling.nextSibling.nextSibling.removeNode();  }  if (icon.nextSibling.nextSibling.nextSibling.nodeName == 'INT'){    icon.nextSibling.nextSibling.nextSibling.removeNode();  }  if (icon.nextSibling.nextSibling.nodeName == 'MOV'){    icon.nextSibling.nextSibling.removeNode();  }}// 1st nodeif (hsData.cHotspot[icon.parentNode.index()].hotspotSound == undefined){  // remove sound icon from node if no sound specified  if (icon.nextSibling.nodeName == 'SND'){    icon.nextSibling.removeNode();  }}// hide development mode message txtPageNotFound._visible = 0; panelH._alpha = 0; popUpText._visible = 0;if (destPageName == undefined){   // using other feature than destination  pageFound="";  // relative navigation - first prev next last  if (hsData.cHotspot[icon.parentNode.index()].relNav != undefined){    // go to relative page         switch(hsData.cHotspot[icon.parentNode.index()].relNav){      case "first":        rootIcon.firstPage();        break;          case "prev":        rootIcon.prevPage();        break;          case "last":        rootIcon.lastPage();        break;          default:        rootIcon.nextPage();        break;        }  }  // remote url - open window  if (hsData.cHotspot[icon.parentNode.index()].windowURL != undefined){    params = new Object();    params.url =  hsData.cHotspot[icon.parentNode.index()].windowURL;    if (hsData.cHotspot[icon.parentNode.index()].windowWidth == undefined){      params.width = "550";      } else {      params.width =  hsData.cHotspot[icon.parentNode.index()].windowWidth;        }    if (hsData.cHotspot[icon.parentNode.index()].windowHeight == undefined){      params.height = "400";      } else {      params.height =  hsData.cHotspot[icon.parentNode.index()].windowHeight;        }    if (hsData.cHotspot[icon.parentNode.index()].htm == undefined || hsData.cHotspot[icon.parentNode.index()].htm == ""){      callJS('openWindow', params);     } else {      params.html = hsData.cHotspot[icon.parentNode.index()].htm;         callJS('createWindow', params);         }  }  // play a sound  if (hsData.cHotspot[icon.parentNode.index()].hotspotSound != undefined){    // hide hotspot  highlights    for (i = 0; i < hspot.responses.length; i++){      hspot.responses[i]._visible = "0";    }         //check for a literal path    sndURL = hsData.cHotspot[icon.parentNode.index()].hotspotSound;    if (sndURL.indexOf('http') == 0){      sndURL = "'" + sndURL + "'";    }    // set up sound player control and continue button.    icon.nextSibling.attributes.controls = graphic._x +',' + (graphic._y + graphic._height - 20) + ',' + graphic._width;    continueX = graphic._x + (graphic._width / 2) - (continueBtnWidth / 2);    continueY = graphic._y + graphic._height + 10;     }     // play a video file  if (hsData.cHotspot[icon.parentNode.index()].hotspotMovie != undefined){    // hide hotspot  highlights    for (i = 0; i < hspot.responses.length; i++){      hspot.responses[i]._visible = "0";    }        //size the movie    if (hsData.cHotspot[icon.parentNode.index()].movieSize != undefined){      icon.parentNode.getChildByName('movie').attributes.w = hsData.cHotspot[icon.parentNode.index()].movieSize.split(',')[0];      icon.parentNode.getChildByName('movie').attributes.h = hsData.cHotspot[icon.parentNode.index()].movieSize.split(',')[1];    }	    // set start and end frame    if (hsData.cHotspot[icon.parentNode.index()].endFrame != undefined){      myEndFrame = hsData.cHotspot[icon.parentNode.index()].endFrame;    } else {      myEndFrame = undefined;    }    if (hsData.cHotspot[icon.parentNode.index()].startFrame != undefined){      myStartFrame = hsData.cHotspot[icon.parentNode.index()].startFrame;    } else {      myStartFrame = "0";    }	    vidURL = hsData.cHotspot[icon.parentNode.index()].hotspotMovie;    //support for links from moletv    if (vidURL.indexOf('moletv.org.uk') != -1){      vid = vidURL.split('=')[1];      vidURL = "'http://www.moletv.org.uk/mod/FileStream.aspx?v=" + vid + "&t=1&z=.flv'"    }	    fullScreen = false;  }  // display a pop up text   if (hsData.cHotspot[icon.parentNode.index()].hotspotPopUp != undefined){    // hide hotspot  highlights    for (i = 0; i < hspot.responses.length; i++){      hspot.responses[i]._visible = "0";    }     // position and size of pop up has been defined earlier    // now set up panelH size and position    panelH._width = putW + 20;    panelH._height = putH + 50;    panelH._x = putX - 10;    panelH._y = putY - 10;    popBtnX = 20;    popBtnY = panelH._y + panelH._height - 30;    popBtnX = panelH._x + (panelH._width / 2) - (continueBtnWidth / 2);    panelH._alpha = 100;    hidePopUp._visible = 1;    popUpText._visible = 1;    popUpText.setText(hsData.cHotspot[icon.parentNode.index()].hotspotPopUp);  }  // standard connector hotspot} else if (destPageName == "") {  // pageID not specified message  txtPageNotFound.setText(notSetMessage);  pageFound="false";  } else {    // a destination has been specified   pageFound="false";  // navigate to destination page  for (i = 0; i < pageID_array.length; i++){	    if (pageID_array[i] == destPageName){		  pageFound = "true";		  destinationIndex = i;      // go to destination page 	  rootIcon.gotoPage(destinationIndex + navOffset);  		  break;    }  }  if (pageFound == "false"){    // pageID was set but not found    txtPageNotFound.setText(idLabel + "<br>" + destPageName + "<br>" + notFoundMessage)  }}if ((pageMode == "development") && (pageFound == "false")){// set up page not found text box  txtPageNotFound.clear();  txtPageNotFound.beginFill(0xFFFFCC, 100);  txtPageNotFound.lineStyle(1,0x000000,100);  txtPageNotFound.drawRect(-10,-10,250,200,20);  txtPageNotFound._visible = 1;  txtPageNotFound.wipe('in',0.25,'Strong','easeIn',2) }]]></SCR>				<SND id="snd" name="protoSound" type="ext" url="{sndURL}" play="1" loop="0" wait="0" />				<MOV id="movie" name="movie" x="0" y="30" url="{vidURL}" controls="1" play="0"><![CDATA[{hsData.cHotspot[icon.parentNode.index()].tip}]]></MOV>				<INT name="loadVideo" perpetual="0">					<RES name="onMovieReady" type="event" eventName="onMovieReady" icon="movie" erase="1" exit="1">						<SCR name="calculate"><![CDATA[//resize the panel to the moviepanelH._width = movie._width + 20;panelH._height = movie._height + 40;// position panel and movieswitch (popUpVAlign) {  case "top":    panelH._y = colMargin - 10;    break;  case "bottom":    panelH._y = (pageHeight - panelH._height - colMargin + 10); // -40 allows for extra panel height to display button    break;  default: // middle    panelH._y = (pageHeight / 2) - (panelH._height / 2);    }switch (popUpHAlign) {  case "left":    panelH._x = colMargin - 10;    break;  case "right":    panelH._x = (stageWidth - panelH._width - colMargin + 10); // -50 allows for extra panel height to display button    break;  default: // center    panelH._x = (rootIcon.w / 2) - (panelH._width / 2);}//panelH._x = (rootIcon.w / 2) - (panelH._width / 2);//panelH._y = (pageHeight / 2) - (panelH._height / 2);movie._x = panelH._x + 10;movie._y = panelH._y + 10;panelH._alpha = "100";movie._alpha = "100";hideVideo._visible = 1;btnToggle._visible = 1;if (hsData.cHotspot[icon.parentNode.index()].reset == 'false'){  movie.flvPlayer.autoRewind = false;}initW = movie._width;initH = movie._height;initX = movie._x;initY = movie._y;// calculate fullScreen values for later  (constrain() does not work for movies)widthRatio = maxWidth2 / initW;heightRatio = maxHeight / initH;// use the smallest of the two ratiosif (widthRatio >= heightRatio){  fullWidth = parseInt(initW * heightRatio);  fullHeight = parseInt(initH * heightRatio);} else {  fullWidth = initW * widthRatio;  fullHeight = initH * widthRatio;}buttonX =  movie._x + movie._width - 30 - continueBtnWidth; if(myStartFrame != undefined){  movie.flvPlayer.seek(myStartFrame));}]]></SCR>					</RES>				</INT>				<INT name="video events" perpetual="1">					<RES rs="btnToggle" swf="templatePath + 'common/zoom.png'" name="toggle" type="button" x="movie._x + movie._width - 20" y="movie._y + movie._height + 2" label="label" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[if (fullScreen == false){  fullScreen = true;  movie.setSize(fullWidth,fullHeight);} else {  fullScreen = false;  movie.setSize(initW,initH);}]]></SCR>					</RES>					<RES name="onResize" type="event" eventName="onResize" icon="movie" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[if (fullScreen == true){  panelH._width = movie._width + 20;  panelH._height = movie._height + 40;  panelH._x = (rootIcon.w / 2) - (panelH._width / 2);  panelH._y = (pageHeight / 2) - (panelH._height / 2);  movie._x = panelH._x + 10;  movie._y = panelH._y + 10;  hideVideo._y = btnToggle._y;    btnToggle._x = movie._x + movie._width - 20;  btnToggle._y = movie._y + movie._height + 2;  buttonX =  movie._x + movie._width - 30 - buttonW; } else {  movie._x = initX;  movie._y = initY;    panelH._x = movie._x - 10;  panelH._y = movie._y - 10;  panelH._width = initW + 20;  panelH._height = initH + 40;        btnToggle._x = initX + initW - 20;  btnToggle._y = initY + initH + 2;  hideVideo._y = btnToggle._y;   buttonX =  movie._x + movie._width - 30 - buttonW; }]]></SCR>					</RES>					<RES name="onPlayheadUpdate" type="event" eventName="onPlayheadUpdate" icon="movie" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[//end time reached?if (myEndFrame != undefined) {  if (movie.flvPlayer.playheadTime > Number(myEndFrame)){    movie.pause();    movie.flvPlayer.seek(Number(myStartFrame));  }}]]></SCR>					</RES>					<RES w="continueBtnWidth" toolTip="{continueBtnTxt}" swf="templatePath + 'common/button.swf'" rs="hideVideo" name="hideVideo" type="button" x="buttonX" y="btnToggle._y" label="{continueBtnTxt}" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[movie.stop();movie._alpha = "0";panelH._alpha = "0";hideVideo._visible = 0;btnToggle._visible = 0;// re-enable hotspotshspot.clear();for (i = 0; i < hspot.responses.length; i++){  hspot.responses[i]._visible = "1";}]]></SCR>					</RES>				</INT>				<INT name="sound events" perpetual="1">					<RES w="continueBtnWidth" swf="templatePath + 'common/button.swf'" toolTip="{continueBtnTxt}" rs="continueBtn" name="continueBtn" type="button" x="continueX" y="continueY" label="{continueBtnTxt}" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[snd.pause();snd._visible = "0";// re-enable hotspotshspot.clear();for (i = 0; i < hspot.responses.length; i++){  hspot.responses[i]._visible = "1";}continueBtn._visible = "0";]]></SCR>					</RES>				</INT>				<INT name="pop up events" perpetual="1">					<RES w="continueBtnWidth" swf="templatePath + 'common/button.swf'" toolTip="{continueBtnTxt}" rs="hidePopUp" name="hidePopUp" type="button" x="popBtnX" y="popBtnY" label="{continueBtnTxt}" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[hspot.clear();popUpText._visible = 0;panelH._alpha = "0";hidePopUp._visible = 0;// re-enable hotspotsfor (i = 0; i < hspot.responses.length; i++){  hspot.responses[i]._visible = "1";}]]></SCR>					</RES>				</INT>			</RES>		</INT>		<DIS embedVars="1" textColour="#FF0000" textSize="20" id="txtPageNotFound" name="txtPageNotFound" x="stageWidth /  2 - 100" y="maxHeight / 2 - 125" w="200" h="250" type="text"><![CDATA[]]></DIS>		<DIS scrolling="auto" id="popUpText" name="popUpText" x="putX" y="putY" w="putW" h="putH" type="text"><![CDATA[]]></DIS>		<SCR name="finalTidyUp"><![CDATA[txtPageNotFound._visible = 0;]]></SCR>	</PG>