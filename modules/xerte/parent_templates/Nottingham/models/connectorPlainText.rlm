	<PG title="Plain Text Connector" name="connectorPlainText">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();if (rootIcon.projMode == "dev"){// Page Wizard   pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];    // routed pages only  pageID_array = new Array();  pageTitle_array = new Array();    for (i = 0; i < rootIcon.pages.length; i++){    pageID_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.pageID);    pageTitle_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.name);	  }  navOffset = 0;    } else {  // Toolkits    myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();    // routed pages only  pageID_array = new Array();   pageTitle_array = new Array();  for (i = 0; i < extXML.firstChild.childNodes.length; i++){    pageID_array.push(extXML.firstChild.childNodes[i].attributes.pageID);    pageTitle_array.push(extXML.firstChild.childNodes[i].attributes.name);  }	  navOffset = pgOffset - 1;    }  rootIcon.setTitleText(templateData.learningObject[0].name);  // handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.connectorPlainText[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }   ]]></SCR>		<SCR id="fnSetNavigation" isFunc="1" name="fnSetNavigation"><![CDATA[// next button and continue buttonif (nextSet != undefined){  rootIcon.nextBtn.setEnabled(nextSet);  rootIcon.contButton.setEnabled(nextSet);	}// back buttonif (backSet != undefined){	  rootIcon.backBtn.setEnabled(backSet);}// table of contentsif (tocSet != undefined){	  rootIcon.tocBtn.setEnabled(tocSet);}]]></SCR>		<SCR isFunc="1" id="fnListToClipboard" name="fnListToClipboard"><![CDATA[// outputs a list of page titles and page ids to the clipboardclipBoardText = "";if (reportStyle == "text"){  for (i = 0; i < pageID_array.length; i++){     // output a list of titles and pageIDs    clipBoardText = clipBoardText + pageLabel + " " + (i + 1) + " " + titleLabel + " " + pageTitle_array[i] + " | " + idLabel + " " + pageID_array[i] + chr(13) + chr(10);  }  System.setClipboard(clipBoardText);} else if (reportStyle == "html"){// html versionclipBoardText = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<html><head><title>' + reportTitle + '</title></head><body>';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<table border="1" cellpadding="5">' + chr(13) + chr(10);clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + pageLabel + '</td><td bgcolor="lightgreen">' + titleLabel + '</td><td bgcolor="lightblue">' + idLabel + '</td></tr>' + chr(13) + chr(10);  for (i = 0; i < pageID_array.length; i++){      clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + (i + 1) + '</td><td bgcolor="lightgreen">' + pageTitle_array[i] + '</td><td bgcolor="lightblue">' + pageID_array[i]  + '</td></tr>' + chr(13) + chr(10);  }  clipBoardText = clipBoardText + '</table></body></html>' + chr(13) + chr(10);  System.setClipboard(clipBoardText);} else {  // do nothing}]]></SCR>		<SCR id="fnTextCon" isFunc="1" name="fnTextCon"><![CDATA[// function to receive pageID of page // and takes the user to the specified page if it exists// if mode = development an error message is displayed if a specified page cannot be founddestPageName = args[0];// new codepageFound = "false";if ((destPageName == undefined) || (destPageName == "")){  // pageID not specified message  txtPageNotFound.setText(notSetMessage);} else {  // a destination has been specified     // navigate to destination page  for (i = 0; i < pageID_array.length; i++){	    if (pageID_array[i] == destPageName){		  pageFound = "true";		  destinationIndex = i;      // set navigation to be used by destination page      nextSet = nextState;      backSet = backState;      tocSet = tocState;      // set navigation prior to going to next page           fnSetNavigation();      // go to destination page 	  rootIcon.gotoPage(destinationIndex + navOffset);  		  break;    }    if (pageFound == "false"){      // pageID was set but not found      txtPageNotFound.setText(idLabel + "<br>" + destPageName + "<br>" + notFoundMessage)    }  }}if ((pageMode == "development") && (pageFound == "false")){// set up page not found text box  txtPageNotFound.clear();  txtPageNotFound.beginFill(0xFFFFCC, 100);  txtPageNotFound.lineStyle(1,0x000000,100);  txtPageNotFound.drawRect(-10,-10,250,200,20);  txtPageNotFound._visible = 1;  txtPageNotFound.wipe('in',0.25,'Strong','easeIn',2) }]]></SCR>		<SCR name="set up"><![CDATA[reportTitle = pageIcon.templateData.connectorPlainText[projPI].reportTitle;pageLabel = pageIcon.templateData.connectorPlainText[projPI].pageLabel;titleLabel = pageIcon.templateData.connectorPlainText[projPI].titleLabel;idLabel = pageIcon.templateData.connectorPlainText[projPI].idLabel;notFoundMessage = pageIcon.templateData.connectorPlainText[projPI].notFoundMessage;notSetMessage = pageIcon.templateData.connectorPlainText[projPI].notSetMessage;if (templateData.learningObject[0].authorSupport == "true"){  pageMode = "development";} else {  pageMode = "live";} if ((pageMode == "development") && (pageIcon.templateData.connectorPlainText[projPI].listToClip != undefined)){  reportStyle = pageIcon.templateData.connectorPlainText[projPI].listToClip;  fnListToClipboard();}// set navigation to be used by destination page  nextState = 1;  backState = 1;  tocState = 1;// configure navigation settings for this page;if (pageIcon.templateData.connectorPlainText[projPI].pageNav == "none"){  nextSet = 0;  backSet = 0;  tocSet = 0;} else {// all  nextSet = 1;  backSet = 1;  tocSet = 1;}// action navigation settingsfnSetNavigation();if (rootIcon.getProperty('visuals') == "1") {  tabVOffset = 15;}  else {  tabVOffset = 30;}if (pageIcon.templateData.connectorPlainText[projPI].textWidth != undefined){  // added to directly set the width of the text display  icon.nextSibling.nextSibling.attributes.w = pageIcon.templateData.connectorPlainText[projPI].textWidth;   }nextSet = pageIcon.templateData.connectorPlainText[projPI].exitNextSet;backSet = pageIcon.templateData.connectorPlainText[projPI].exitBackSet;tocSet =  pageIcon.templateData.connectorPlainText[projPI].exitTocSet;if (pageIcon.templateData.connectorPlainText[projPI].narration != undefined){  narration = pageIcon.templateData.connectorPlainText[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<DIS scrolling="auto" name="text" x="20" y="20" w="550" h="475" type="text"><![CDATA[{pageIcon.templateData.connectorPlainText[projPI]}]]></DIS>		<DIS embedVars="1" textColour="#FF0000" textSize="20" id="txtPageNotFound" name="txtPageNotFound" x="(760 - 180) / 2" y="(474 - 80) / 2" w="180" h="80" type="text"><![CDATA[]]></DIS>		<SCR name="finalTidyUp"><![CDATA[// set up page not found text boxtxtPageNotFound.beginFill(0xFFFFCC, 100);txtPageNotFound.lineStyle(1,0x000000,100);txtPageNotFound.drawRect(-10,-10,200,150,20);txtPageNotFound.dropShadow(7,45,0x999999,50);txtPageNotFound._visible = 0;]]></SCR>	</PG>