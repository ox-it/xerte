	<PG title="Perspectives" name="perspectives">		<DIS id="mainVidBorder" name="mainVidBorder" x="0" y="0" type="ext" url="FileLocation + "><![CDATA[]]></DIS>		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();if (rootIcon.projMode == "dev"){   // Page Wizard  pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];  pageWizard = "true";   //  myInfo = pageIcon.templateData.perspectives[projPI];  //  myExtXML = pageIcon.extXML.firstChild.childNodes[0];  } else {    // Toolkits    myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);    pageIcon.templateData = myXML.toObject();    pageWizard = "false";//    myInfo = pageIcon.templateData.perspectives[projPI];//    myExtXML = extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset];    }  rootIcon.setTitleText(templateData.learningObject[0].name);	// handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.perspectives[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }  // set up my info and myExtXML now that projPI is definedif (pageWizard == "true"){  myInfo = pageIcon.templateData.perspectives[projPI];    myExtXML = pageIcon.extXML.firstChild.childNodes[0];  } else {  myInfo = pageIcon.templateData.perspectives[projPI];  myExtXML = extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset];}// set up text stringsif (pageIcon.templateData.perspectives[projPI].noMediaMessage != undefined){  noMediaMessage = pageIcon.templateData.perspectives[projPI].noMediaMessage;}if (pageIcon.templateData.perspectives[projPI].backBtnTip != undefined){  backBtnTip = pageIcon.templateData.perspectives[projPI].backBtnTip;} else {  backBtnTip = "Back";}if (pageIcon.templateData.perspectives[projPI].nextBtnTip != undefined){  nextBtnTip = pageIcon.templateData.perspectives[projPI].nextBtnTip;} else {  nextBtnTip = "Forward";}if (pageIcon.templateData.perspectives[projPI].videoTip != undefined){  videoTip = pageIcon.templateData.perspectives[projPI].videoTip;} else {  videoTip = "Video Clip";}if (pageIcon.templateData.perspectives[projPI].soundTip != undefined){  soundTip = pageIcon.templateData.perspectives[projPI].soundTip;} else {  soundTip = "Sound Clip";}if (pageIcon.templateData.perspectives[projPI].narration != undefined){  narration = pageIcon.templateData.perspectives[projPI].narration;  rootIcon.broadcast('showAudio');}// SORTS INFO ABOUT TYPE OF MEDIA - MOVIE OR SOUNDtotalClipNo = myExtXML.childNodes.length; // total clip no.clipTypes = new Array();                  // type of clipcurrentClip = 0;for (i=0; i<totalClipNo; i++) {  clipTypes.push(myExtXML.childNodes[i].nodeName);}// SORTS INFO FOR MOVIE CLIPSmovieTxt = new Array();movieTitle = new Array();movieFile = new Array();movieNo = myInfo.movie.length;  // no. of moviesfor (i=0; i<movieNo; i++){  movieTxt.push(myInfo.movie[i].txt);  movieTitle.push(myInfo.movie[i].name);  movieFile.push(myInfo.movie[i].src);}// SORTS INFO FOR SOUND CLIPSsoundTxt = new Array();soundTitle = new Array();soundFile = new Array();soundImg = new Array();soundToolTip = new Array();soundNo = myInfo.sound.length;  // no. of soundsfor (i=0; i<soundNo; i++){  soundTxt.push(myInfo.sound[i].txt);  soundTitle.push(myInfo.sound[i].name);  soundFile.push(myInfo.sound[i].src);  soundImg.push(myInfo.sound[i].img);  soundToolTip.push(myInfo.sound[i].tooltip);}// SORTS INFO FOR IMAGE CLIPSimgTxt = new Array();imgTitle = new Array();imgFile = new Array();imgToolTip = new Array();imgNo = myInfo.image.length;  // no. of imagesfor (i=0; i<imgNo; i++){  imgTxt.push(myInfo.image[i].txt);  imgTitle.push(myInfo.image[i].name);  imgFile.push(myInfo.image[i].src);  imgToolTip.push(myInfo.image[i].tooltip);}if (totalClipNo != 0) {  // transparent thumbnail background  mainVidBorder.beginFill(0xFFFFFF,30);  mainVidBorder.drawRect(0,8,800,124);  mainVidBorder.dropShadow(3,90,0x999999,50);}]]></SCR>		<SCR name="setUpThumbs"><![CDATA[maxThumbs = 6; // max visible at one timecurrentScroll = 0; // used to keep track of where thumbs are when more than 6 on the screen// thumbnail bg coloursfor (i=0;i<totalClipNo;i++){  if (i<maxThumbs)  {    xPos = 58+(i*116);    mainVidBorder.beginFill(0xFFFFFF,100);    mainVidBorder.drawRect(xPos,15,104,110);  }}if (totalClipNo > 0){  if (icon.attributes.built != "true") {    movieCount = 0;    soundCount = 0;    imageCount = 0;        // duplicates correct no. of thumb pages      icon.nextSibling.firstChild.duplicate(totalClipNo-1);        // sets attributes for thumbs - step type & no. (of that type)    for (i=0; i<totalClipNo; i++)    {      myThumb = icon.nextSibling.childNodes[i];      myThumb.attributes.clipType = clipTypes[i];            if (myThumb.attributes.clipType == "movie")          {        myThumb.attributes.clipTypeNo = movieCount;        movieCount++;      } else if (myThumb.attributes.clipType == "sound")      {        myThumb.attributes.clipTypeNo = soundCount;        soundCount++;      } else if (myThumb.attributes.clipType == "image")      {        myThumb.attributes.clipTypeNo = imageCount;        imageCount++;      }    }        icon.attributes.built = "true";  }  }]]></SCR>		<DEC id="thumbs" name="thumbs" repeat="all" branch="sequence" pause="0" erase="0" eraseOnExit="0">			<PG title="" name="protoThumb">				<SCR name="getInfo"><![CDATA[// sorts out icons in protoThumb depending on clip typemyClipNo = icon.parentNode.attributes.clipTypeNo;myClipType = icon.parentNode.attributes.clipType;if (myClipNo == undefined){  icon.parentNode.clip().removeMovieClip();}// MOVIE CLIP STEPif (myClipType == "movie"){  thumbTitle = movieTitle[myClipNo];  thumbMovie = movieFile[myClipNo];  thumbImg = 'File Location+';  thumbToolTip = videoTip;    icon.parentNode.getChildByName('onLoad').removeNode();}// SOUND CLIP STEPelse if (myClipType == "sound"){  thumbTitle = soundTitle[myClipNo];  thumbImg = soundImg[myClipNo];  thumbMovie = 'File Location+';  thumbToolTip = soundToolTip[myClipNo];    // if no image uploaded use default  if (thumbImg == '' || thumbImg == undefined)  {    thumbImg = "templatePath + 'common/sound.jpg'";    thumbToolTip = soundTip;  }    // if no tooltip added use default  if (thumbToolTip == undefined)  {    thumbToolTip = soundTip;  }}// IMAGE CLIP STEPelse if (myClipType == "image"){  thumbTitle = imgTitle[myClipNo];  thumbImg = imgFile[myClipNo];  thumbMovie = 'File Location+';  thumbToolTip = imgToolTip[myClipNo];  if (thumbToolTip == undefined)  {    thumbToolTip = "";  }}icon.nextSibling.attributes.id = 'thumbTitle'+icon.parentNode.index();icon.nextSibling.nextSibling.attributes.id = 'thumbMovie'+icon.parentNode.index();icon.nextSibling.nextSibling.nextSibling.attributes.id = 'thumbImg'+icon.parentNode.index();// attribute keeps track of current positionicon.parentNode.attributes.currentPos = icon.parentNode.index();]]></SCR>				<DIS name="thumbTitle" x="60+icon.parentNode.index()*116;" y="15" w="100" h="20" type="text"><![CDATA[{'<p align="center"><b>'+thumbTitle+'</b></p>'};]]></DIS>				<MOV h="72" w="96" name="thumbMov" x="62+icon.parentNode.index()*116;" y="50" url="{thumbMovie};" controls="0" play="0"><![CDATA[]]></MOV>				<DIS toolTip="{thumbToolTip}" name="thumbImg" x="62+icon.parentNode.index()*116;" y="50" type="ext" url="{thumbImg};"><![CDATA[]]></DIS>				<DIS name="playIcon" x="63+icon.parentNode.index()*116;" y="52" type="ext" url="templatePath + 'common/play.png'"><![CDATA[]]></DIS>				<INT name="interaction" perpetual="1">					<RES name="hotSpot" type="hotSpot" x="60+icon.parentNode.parentNode.index()*116;" y="15" w="100" h="110" click="1" cursor="1" erase="1" exit="0">						<SCR name="clickResponse"><![CDATA[// tells framework to change pageviewerFW.gotoPage(icon.findParentByName('protoThumb').index());]]></SCR>					</RES>				</INT>				<INT name="onLoad" perpetual="0">					<RES name="loadedThumbImg" type="event" eventName="onLoad" icon="'thumbImg'+icon.parentNode.parentNode.index();" erase="1" exit="1">						<SCR name="resizeThumbImg"><![CDATA[//resize the image if necessarycurrentImg = icon.parentNode.parentNode.parentNode.childNodes[3].clip();proportion = currentImg._width / currentImg._height;if (proportion < 1.25){  currentImg._height = 72;  currentImg._width = currentImg._height / proportion;} else {  currentImg._width = 96;  currentImg._height = currentImg._width / proportion;}if (currentImg._width < 96){  temp = 96 - currentImg._width;  temp = temp/2;  currentImg._x += temp;}]]></SCR>					</RES>				</INT>			</PG>		</DEC>		<SCR isFunc="1" name="thumbVisibility"><![CDATA[// __________ FUNCTION __________ //// looks at whether the thumbnails should be visible initially and as scrolled throughfor (i=0;i<totalClipNo;i++){    currentPositions = thumbs.XMLElement.childNodes[i];    hsToChg = thumbs.XMLElement.childNodes[i].childNodes[5].firstChild.clip();    for (n=0;n<4;n++)  {    clipToChg = thumbs.XMLElement.childNodes[i].childNodes[n+1].clip();    if (currentPositions.attributes.currentPos >= maxThumbs || currentPositions.attributes.currentPos < 0)    {      clipToChg._visible = false;      hsToChg.enabled = false;    } else {      if (thumbs.XMLElement.childNodes[i].attributes.clipType != "image" || n != 3) {        clipToChg._visible = true;      }      hsToChg.enabled = true;    }  }}]]></SCR>		<INT name="thumbBtn" perpetual="1">			<RES toolTip="{nextBtnTip}" swf="templatePath + 'common/showNextButton.swf'" id="fwdBtn" h="30" w="20" name="forward" type="button" x="750" y="47" erase="1" exit="0">				<SCR name="fwdScript"><![CDATA[for (i=0;i<totalClipNo;i++){  currentPositions = thumbs.XMLElement.childNodes[i];  currentPositions.attributes.currentPos -= 1;    hsToMove = thumbs.XMLElement.childNodes[i].getChildByName('interaction').firstChild.clip();  hsToMove._x -= 116;  for (n=0;n<4;n++)  {    if (thumbs.XMLElement.childNodes[i].attributes.clipType != "image" || n != 3) {      clipToChg = thumbs.XMLElement.childNodes[i].childNodes[n+1].clip();       clipToChg._x -= 116;    }  }}// controls whether btns are enabledcurrentScroll++;if (currentScroll+maxThumbs == totalClipNo){  fwdBtn.XMLElement.clip().setEnabled(false);}bckBtn.XMLElement.clip().setEnabled(true);thumbVisibility();]]></SCR>			</RES>			<RES toolTip="{backBtnTip}" swf="templatePath + 'common/showPrevButton.swf'" id="bckBtn" h="30" w="20" name="back" type="button" x="30" y="47" erase="1" exit="0">				<SCR name="bckScript"><![CDATA[for (i=0;i<totalClipNo;i++){  currentPositions = thumbs.XMLElement.childNodes[i];  currentPositions.attributes.currentPos += 1;    hsToMove = thumbs.XMLElement.childNodes[i].getChildByName('interaction').firstChild.clip();  hsToMove._x += 116;    for (n=0;n<4;n++)  {    if (thumbs.XMLElement.childNodes[i].attributes.clipType != "image" || n != 3) {      clipToChg = thumbs.XMLElement.childNodes[i].childNodes[n+1].clip();       clipToChg._x += 116;     }   }}// controls whether btns are enabledcurrentScroll--;if (currentScroll == 0){  bckBtn.XMLElement.clip().setEnabled(false);}fwdBtn.XMLElement.clip().setEnabled(true);thumbVisibility();]]></SCR>			</RES>		</INT>		<SCR name="setUpScrolling"><![CDATA[// sees whether buttons are neededif (totalClipNo <= maxThumbs){  fwdBtn.XMLElement.clip()._visible = false;  bckBtn.XMLElement.clip()._visible = false;} else {  bckBtn.XMLElement.clip().setEnabled(false);    thumbVisibility();}// if thumb is image only, don't show play button on itfor (i=0;i<totalClipNo;i++){  if (thumbs.XMLElement.childNodes[i].attributes.clipType == "image") {    thumbs.XMLElement.childNodes[i].childNodes[4].clip()._visible = false;  }}]]></SCR>		<SCR name="setUpMovies"><![CDATA[// duplicates framework pagesif (totalClipNo > 0){  if (icon.attributes.built != "true") { // so it only duplicates the pages once    movieCount = 0;    soundCount = 0;    imageCount = 0;        // duplicates correct no. of thumb pages      icon.nextSibling.firstChild.duplicate(totalClipNo-1); // totalClipNo is calculated in getPageID script        // sets attributes for viewer FW pages - step type & no. (of that type)    for (i=0; i<totalClipNo; i++)    {      myViewer = icon.nextSibling.childNodes[i];      myViewer.attributes.clipType = clipTypes[i];      if (myViewer.attributes.clipType == "movie")          {        myViewer.attributes.clipTypeNo = movieCount;        movieCount++;      } else if (myViewer.attributes.clipType == "sound")      {        myViewer.attributes.clipTypeNo = soundCount;        soundCount++;      } else if (myViewer.attributes.clipType == "image")      {        myViewer.attributes.clipTypeNo = imageCount;        imageCount++;      }    }        icon.attributes.built = "true";  }  }]]></SCR>		<FW id="viewerFW" name="viewerFW">			<PG name="viewer">				<DIS id="bg" name="bg" x="0" y="0" type="ext" url="FileLocation + "><![CDATA[]]></DIS>				<SCR name="getInfo"><![CDATA[// sorts out icons in viewer depending on clip typemyClipNo = icon.parentNode.attributes.clipTypeNo;myClipType = icon.parentNode.attributes.clipType;// MOVIE CLIP STEPif (myClipType == "movie"){  fwText = movieTxt[myClipNo];  fwTitle = movieTitle[myClipNo];  fwMovie = movieFile[myClipNo];  fwSound = 'FileLocation +';  fwImg = 'FileLocation +';  fwToolTip = videoTip;    //icon.parentNode.getChildByName('onLoad').removeNode();    bg.beginFill(0xFFFFFF,100);  bg.drawRect(40,170,325,270);  bg.dropShadow(3,90,0x999999,50);}// SOUND CLIP STEPelse if (myClipType == "sound"){  fwText = soundTxt[myClipNo];  fwTitle = soundTitle[myClipNo];  fwMovie = 'FileLocation +';  fwSound = soundFile[myClipNo];  fwImg = soundImg[myClipNo];  fwToolTip = soundToolTip[myClipNo];    // if no image uploaded use default  if (fwImg == '' || fwImg == undefined)  {    fwImg = "templatePath + 'common/sound.jpg'";    fwToolTip = soundTip;  }    // if no tooltip added use default  if (fwToolTip == undefined)  {    fwToolTip = soundTip;  }}// IMAGE CLIP STEPelse if (myClipType == "image"){  fwText = imgTxt[myClipNo];  fwTitle = imgTitle[myClipNo];  fwMovie = 'FileLocation +';  fwImg = imgFile[myClipNo];  fwToolTip = imgToolTip[myClipNo];  if (fwToolTip == undefined)  {    fwToolTip = "";  }    icon.parentNode.childNodes[7].removeNode();}// NO CLIPS ADDEDelse {  fwText = "";  fwTitle = "";}icon.parentNode.childNodes[5].attributes.id = 'mainImg'+icon.parentNode.index();icon.parentNode.childNodes[4].attributes.id = 'mainMovie'+icon.parentNode.index();icon.nextSibling.attributes.textSize = icon.parentNode.parentNode.parentNode.attributes.txtSize;icon.nextSibling.nextSibling.attributes.textSize = icon.parentNode.parentNode.parentNode.attributes.txtSize;]]></SCR>				<DIS h="10" name="title" x="390" y="155" w="365" type="text"><![CDATA[{'<b>'+fwTitle+'</b>'};]]></DIS>				<DIS scrolling="auto" name="text" x="390" y="180" w="365" h="300" type="text"><![CDATA[{fwText};]]></DIS>				<MOV h="250" w="305" name="movie" x="50" y="180" url="{fwMovie};" controls="1" play="0"><![CDATA[]]></MOV>				<DIS toolTip="{fwToolTip}" name="image" x="50" y="180" type="ext" url="{fwImg};"><![CDATA[]]></DIS>				<INT name="onLoad" perpetual="0">					<RES name="loadedImg" type="event" eventName="onLoad" icon="'mainImg'+icon.parentNode.parentNode.index();" erase="1" exit="1">						<SCR name="resizeImg"><![CDATA[//resize the image if necessarycurrentImg = icon.parentNode.parentNode.parentNode.childNodes[5].clip();proportion = currentImg._width / currentImg._height;targetW = 305;targetH = 230;if (proportion < 1.1){  if (currentImg._height > targetH)  {    currentImg._height = targetH;    currentImg._width = currentImg._height / proportion;  }} else {  if (currentImg._width > targetW)  {      currentImg._width = targetW;    currentImg._height = currentImg._width / proportion;  }}// align img centrally if necessaryif (currentImg._width < targetW){  temp = targetW - currentImg._width;  temp = temp/2;  currentImg._x += temp;}if (currentImg._height < targetH){  temp = targetH - currentImg._height;  temp = temp/2;  currentImg._y += temp;}// adds controls & bg to soundbg.beginFill(0xFFFFFF,100);bg.drawRect(currentImg._x-10,currentImg._y-10,currentImg._width+20,currentImg._height+20);bg.dropShadow(3,90,0x999999,50);icon.parentNode.parentNode.nextSibling.attributes.controls = currentImg._x +',' + (currentImg._y + currentImg._height - 20) + ',' + currentImg._width;]]></SCR>					</RES>				</INT>				<SND name="sound" type="ext" url="{fwSound};" play="0" loop="0" wait="0" />			</PG>		</FW>	</PG>