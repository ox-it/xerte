	<PG title="Redirector Connector" name="cRedirector">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();if (rootIcon.projMode == "dev"){// Page Wizard   pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];    // routed pages only  pageID_array = new Array();  pageTitle_array = new Array();    for (i = 0; i < rootIcon.pages.length; i++){    pageID_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.pageID);    pageTitle_array.push(rootIcon.pages[i].extXML.firstChild.childNodes[0].attributes.name);  }  navOffset = 0;    } else {  // Toolkits    myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();    // routed pages only  pageID_array = new Array();   pageTitle_array = new Array();  for (i = 0; i < extXML.firstChild.childNodes.length; i++){    pageID_array.push(extXML.firstChild.childNodes[i].attributes.pageID);    pageTitle_array.push(extXML.firstChild.childNodes[i].attributes.name);  }  navOffset = pgOffset - 1;    }  rootIcon.setTitleText(templateData.learningObject[0].name);// handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.cRedirector[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }       ]]></SCR>		<SCR id="fnSetNavigation" isFunc="1" name="fnSetNavigation"><![CDATA[// next button and continue buttonif (nextSet != undefined){  rootIcon.nextBtn.setEnabled(nextSet);  rootIcon.contButton.setEnabled(nextSet);	}// back buttonif (backSet != undefined){	  rootIcon.backBtn.setEnabled(backSet);}// table of contentsif (tocSet != undefined){	  rootIcon.tocBtn.setEnabled(tocSet);}]]></SCR>		<SCR isFunc="1" id="fnListToClipboard" name="fnListToClipboard"><![CDATA[// outputs a list of page titles and page ids to the clipboardclipBoardText = "";if (reportStyle == "text"){  for (i = 0; i < pageID_array.length; i++){     // output a list of titles and pageIDs    clipBoardText = clipBoardText + pageLabel + " " + (i + 1) + " " + titleLabel + " " + pageTitle_array[i] + " | " + idLabel + " " + pageID_array[i] + chr(13) + chr(10);  }  System.setClipboard(clipBoardText);} else if (reportStyle == "html"){// html versionclipBoardText = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<html><head><title>' + reportTitle + '</title></head><body>';clipBoardText = clipBoardText + chr(13) + chr(10);clipBoardText = clipBoardText + '<table border="1" cellpadding="5">' + chr(13) + chr(10);clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + pageLabel + '</td><td bgcolor="lightgreen">' + titleLabel + '</td><td bgcolor="lightblue">' + idLabel + '</td></tr>' + chr(13) + chr(10);  for (i = 0; i < pageID_array.length; i++){      clipBoardText = clipBoardText + '<tr><td bgcolor="yellow">' + (i + 1) + '</td><td bgcolor="lightgreen">' + pageTitle_array[i] + '</td><td bgcolor="lightblue">' + pageID_array[i]  + '</td></tr>' + chr(13) + chr(10);  }  clipBoardText = clipBoardText + '</table></body></html>' + chr(13) + chr(10);  System.setClipboard(clipBoardText);} else {  // do nothing}]]></SCR>		<SCR name="set up"><![CDATA[// display text stringscontinueBtnTxt = pageIcon.templateData.cRedirector[projPI].continueBtnTxt;continueBtnTip = pageIcon.templateData.cRedirector[projPI].continueBtnTip;continueBtnWidth = pageIcon.templateData.cRedirector[projPI].continueBtnWidth;reportTitle = pageIcon.templateData.cRedirector[projPI].reportTitle;pageLabel = pageIcon.templateData.cRedirector[projPI].pageLabel;titleLabel = pageIcon.templateData.cRedirector[projPI].titleLabel;idLabel = pageIcon.templateData.cRedirector[projPI].idLabel;notFoundMessage = pageIcon.templateData.cRedirector[projPI].notFoundMessage;notSetMessage = pageIcon.templateData.cRedirector[projPI].notSetMessage;if (templateData.learningObject[0].authorSupport == "true"){  pageMode = "development";} else {  pageMode = "live";}  if ((pageMode == "development") && (pageIcon.templateData.cRedirector[projPI].listToClip != undefined)){  reportStyle = pageIcon.templateData.cRedirector[projPI].listToClip;  fnListToClipboard();}// set navigation to be used by destination page  nextState = 1;  backState = 1;  tocState = 1;// configure navigation settings for this page;if (pageIcon.templateData.cRedirector[projPI].pageNav == "none"){  nextSet = 0;  backSet = 0;  tocSet = 0;} else {// all  nextSet = 1;  backSet = 1;  tocSet = 1;}// action navigation settingsfnSetNavigation();if (pageIcon.templateData.cRedirector[projPI].align != undefined){  align = pageIcon.templateData.cRedirector[projPI].align;} else {  align = "Left";}maxWidth = stageWidth - 40;pageHeight = rootIcon.h - (rootIcon.statusBarHeight + rootIcon.titleBarHeight + rootIcon.titleBannerHeight);// set text widthif (pageIcon.templateData.cRedirector[projPI].textWidth == "narrow"){  textWidth = (stageWidth / 4) - 40;} else if (pageIcon.templateData.cRedirector[projPI].textWidth == "wide"){  textWidth = (stageWidth / 2) - 40;} else {  textWidth = stageWidth - 40;} // action if no image is providedif (pageIcon.templateData.cRedirector[projPI].url == undefined || pageIcon.templateData.cRedirector[projPI].url == ""){  // remove redundant nodes  if (icon.nextSibling.nextSibling.nextSibling.nextSibling.nodeName == 'INT'){    icon.nextSibling.nextSibling.nextSibling.nextSibling.removeNode();  }         if (icon.nextSibling.nextSibling.nextSibling.nodeName == 'DIS'){    icon.nextSibling.nextSibling.nextSibling.removeNode();  }  } else { // we have an image file  if (pageIcon.templateData.cRedirector[projPI].url.indexOf('http') == 0){    url = "'" + pageIcon.templateData.cRedirector[projPI].url + "'";  } else {    url = pageIcon.templateData.cRedirector[projPI].url  }}if (pageIcon.templateData.textGraphics[projPI].narration != undefined){  narration = pageIcon.templateData.textGraphics[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<DIS tabIndex="-1" id="panel" name="panel" x="-300" y="20" type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>		<INT name="loadPanel" perpetual="0">			<RES name="onLoad" type="event" eventName="onLoad" icon="panel" erase="1" exit="1">				<SCR name="exit"><![CDATA[//ok to move onif (pageIcon.templateData.cRedirector[projPI].url == undefined || pageIcon.templateData.cRedirector[projPI].url == ""){  panel._alpha = 0;}]]></SCR>			</RES>		</INT>		<DIS toolTip="{pageIcon.templateData.cRedirector[projPI].tip}" scrolling="auto" id="graphic" name="graphic" x="coded" y="30" type="ext" url="{url}"><![CDATA[{pageIcon.templateData.cRedirector[projPI].tip}]]></DIS>		<INT name="loadImage" perpetual="0">			<RES name="onLoad" type="event" eventName="onLoad" icon="graphic" erase="1" exit="1">				<SCR name="calculate"><![CDATA[p = graphic._width / graphic._height;graphicMaxH = pageHeight - 80;if (pageIcon.templateData.cRedirector[projPI].textWidth == "max"){  graphicMaxW = stageWidth - 200;  graphic.constrain(graphicMaxW,graphicMaxH);  textWidth = maxWidth - graphic._width - 40;} else {  graphicMaxW = stageWidth - (textWidth + 80);  graphic.constrain(graphicMaxW, graphicMaxH);   }  //resize the panel to the graphicpanel._width = graphic._width + 20;panel._height = graphic._height + 20;panel._y = 20;graphic._y = panel._y + 10;if (align == 'Left'){  panel._x = stageWidth - panel._width - 20;  graphic._x = panel._x + 10;} if (align == 'Right'){  panel._x = 20;  graphic._x = 30;}]]></SCR>			</RES>		</INT>		<SCR name="final text and button setup"><![CDATA[textHeight = pageHeight - 80;if (align == 'Left'){  //  panel._x = stageWidth - panel._width - 20;  textX = 20;  textY = 20;} if (align == 'Right'){  textX = stageWidth - (20 + textWidth);  textY = 20;  }// position buttonbuttonX = textX + (textWidth / 2) - (continueBtnWidth / 2);buttonY = textY + textHeight + 20;]]></SCR>		<DIS embedVars="1" scrolling="auto" id="textBlock" h="textHeight" name="text" x="textX" y="textY" w="textWidth" type="text"><![CDATA[{pageIcon.templateData.cRedirector[projPI].endText}]]></DIS>		<INT name="go to page" perpetual="1">			<RES swf="templatePath + 'common/button.swf'" w="continueBtnWidth" toolTip="{continueBtnTip}" name="continue" type="button" x="buttonX" y="buttonY" label="{continueBtnTxt}" erase="1" exit="0">				<SCR name="go to page"><![CDATA[// find the destination page, set up the navigation to use for the destination page// then go to it.// if mode = development an error message is displayed if a specified page cannot be founddestPageName = pageIcon.templateData.cRedirector[projPI].destination;pageFound = "false";if ((destPageName == undefined) || (destPageName == "")){  // pageID not specified message  txtPageNotFound.setText(notSetMessage);} else {  // a destination has been specified     // navigate to destination page  for (i = 0; i < pageID_array.length; i++){	    if (pageID_array[i] == destPageName){		  pageFound = "true";		  destinationIndex = i;      // set navigation to be used by destination page      nextSet = nextState;      backSet = backState;      tocSet = tocState;      // set navigation prior to going to next page           fnSetNavigation();      // go to destination page 	  rootIcon.gotoPage(destinationIndex + navOffset);  		  break;    }    if (pageFound == "false"){      // pageID was set but not found      txtPageNotFound.setText(idLabel + "<br>" + destPageName + "<br>" + notFoundMessage)    }  }}if ((pageMode == "development") && (pageFound == "false")){// set up page not found text box  txtPageNotFound.clear();  txtPageNotFound.beginFill(0xFFFFCC, 100);  txtPageNotFound.lineStyle(1,0x000000,100);  txtPageNotFound.drawRect(-10,-10,250,200,20);  txtPageNotFound._visible = 1;  txtPageNotFound.wipe('in',0.25,'Strong','easeIn',2) }]]></SCR>			</RES>		</INT>		<DIS embedVars="1" textColour="#FF0000" textSize="20" id="txtPageNotFound" name="txtPageNotFound" x="(760 - 180) / 2" y="(474 - 80 - 15) / 2" w="180" h="80" type="text"><![CDATA[hello]]></DIS>		<SCR name="finalTidyUp"><![CDATA[txtPageNotFound._visible = 0;]]></SCR>	</PG>