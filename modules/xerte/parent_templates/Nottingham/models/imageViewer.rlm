	<PG title="Image Viewer" name="imageViewer">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip()if (rootIcon.projMode == "dev"){   // Page Wizard  pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];} else {  // Toolkits  myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();}  rootIcon.setTitleText(templateData.learningObject[0].name);  // handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.imageViewer[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; } // set up text stringsif (pageIcon.templateData.imageViewer[projPI].moveTip != undefined){  moveTip = pageIcon.templateData.imageViewer[projPI].moveTip;} else {  moveTip = "Move";}if (pageIcon.templateData.imageViewer[projPI].zoomInTip != undefined){  zoomInTip = pageIcon.templateData.imageViewer[projPI].zoomInTip;} else {  zoomInTip = "Zoom In";}if (pageIcon.templateData.imageViewer[projPI].zoomOutTip != undefined){  zoomOutTip = pageIcon.templateData.imageViewer[projPI].zoomOutTip;} else {  zoomOutTip = "Zoom Out";}if (pageIcon.templateData.imageViewer[projPI].selectAreaTip != undefined){  selectAreaTip = pageIcon.templateData.imageViewer[projPI].selectAreaTip;} else {  selectAreaTip = "Select Area";}if (pageIcon.templateData.imageViewer[projPI].resetImageTip != undefined){  resetImageTip = pageIcon.templateData.imageViewer[projPI].resetImageTip;} else {  resetImageTip = "Reset Area";}if (pageIcon.templateData.imageViewer[projPI].toggleScreenTip != undefined){  toggleScreenTip = pageIcon.templateData.imageViewer[projPI].toggleScreenTip;} else {  toggleScreenTip = "Toggle Full Screen";}if (pageIcon.templateData.imageViewer[projPI].narration != undefined){  narration = pageIcon.templateData.imageViewer[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<DIS tabIndex="-1" id="panel" name="panel" x="-300" y="20" type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>		<INT name="loadPanel" perpetual="0">			<RES name="onLoad" type="event" eventName="onLoad" icon="panel" erase="1" exit="1">				<SCR name="exit"><![CDATA[//ok to move on]]></SCR>			</RES>		</INT>		<DIS scrolling="auto" id="graphic" name="graphic" x="coded" y="30" type="ext" url="{pageIcon.templateData.imageViewer[projPI].url}"><![CDATA[]]></DIS>		<DIS id="mask" name="mask" x="0" y="0" w="400" h="10" type="text"><![CDATA[]]></DIS>		<INT name="loadImage" perpetual="0">			<RES name="onLoad" type="event" eventName="onLoad" icon="graphic" erase="1" exit="1">				<SCR name="calculate"><![CDATA[align = pageIcon.templateData.imageViewer[projPI].align;p = graphic._width / graphic._height;if (align == "Top" || align == 'Bottom'){  maxWidth = 740;  maxHeight = 250;} else {  //left or right, so fit to width  maxWidth = 465;  maxHeight = 465;}graphic.constrain(maxWidth, maxHeight);//resize the panel to the graphicpanel._width = graphic._width + 20;panel._height = graphic._height + 20;if (align == 'Left'){  panel._x = stageWidth - panel._width - 20;  graphic._x = panel._x + 10;  textX = 20;  textY = 20;  textWidth = stageWidth - 80 - graphic._width;} if (align == 'Right'){  panel._x = 20;  graphic._x = 30;  textX = graphic._width + 60;  textY = 20;  textWidth = stageWidth - 80 - graphic._width;}if (align == 'Bottom'){  panel._x = 20;  graphic._x = 30;  textWidth = panel._width;  textX = panel._x;  textY = panel._y + panel._height + 20;}if (align == 'Top'){  panel._x = 20;  graphic._x = 30;  textWidth = panel._width;  textX = panel._x;  textY = panel._y + panel._height + 20;}mask.beginFill(0xFFFF00,0);mask.drawRect(graphic._x, graphic._y, graphic._width, graphic._height);graphic.setMask(mask);initX = graphic._x;initY = graphic._y;initW = graphic._width;initH = graphic._height;initScale = graphic._xscale;maskX = graphic._x;maskY = graphic._y;maskW = graphic._width;maskH = graphic._height;centreX = maskX + maskW / 2;centreY = maskY + maskH / 2;lastScale = 1;]]></SCR>			</RES>		</INT>		<SCR name="setProperties"><![CDATA[mode = 'move';screen = 'min';]]></SCR>		<DIS scrolling="auto" id="textBlock" h="480" name="text" x="textX" y="textY" w="textWidth" type="text"><![CDATA[{pageIcon.templateData.imageViewer[projPI]}]]></DIS>		<SCR name="layout"><![CDATA[if (align == 'Top'){  textBlock._y = 20;  panel._y = textBlock._y + textBlock._height + 20;  graphic._y = panel._y + 10;    initX = graphic._x;  initY = graphic._y;}]]></SCR>		<INT id="controls" name="controls" perpetual="1">			<RES name="onPress" type="event" eventName="onPress" icon="graphic" erase="1" exit="0">				<SCR name="startDrag"><![CDATA[if (mode == 'move'){  graphic.startDrag(false, maskX - (graphic._width - maskW), maskY - (graphic._height - maskH),maskX, maskY);} else if (mode == 'zoomIn'){  graphic._xscale *= 1.25;  graphic._yscale *= 1.25;  graphic._x -= (graphic._width - graphic._width*0.8) / 2;  graphic._y -= (graphic._height - graphic._height*0.8) / 2;} else if (mode == 'zoomOut' && graphic._width > maskW * 1.25){    if (graphic._width > maskW * 1.25){      graphic._xscale *= 0.8;    graphic._yscale *= 0.8;        graphic._x += (graphic._width*1.25 - graphic._width) / 2;    graphic._y += (graphic._height*1.25 - graphic._height) / 2;          if (graphic._x > maskX){      graphic._x = maskX;    }    if (graphic._y > maskY){      graphic._y = maskY;    }     if (graphic._x + graphic._width < maskX + maskW){      graphic._x = maskX + maskW - graphic._width;    }    if (graphic._y + graphic._height < maskY + maskH){      graphic._y = maskY + maskH - graphic._height;    }  }} else if (mode == 'select'){  selecting = true;  mouseX = mask._xmouse;  mouseY = mask._ymouse;}]]></SCR>			</RES>			<RES name="onRelease" type="event" eventName="onRelease" icon="graphic" erase="1" exit="0">				<SCR name="stopDrag"><![CDATA[if (mode == 'move'){  graphic.stopDrag();}if (mode == 'select'){  selecting = false;  controls.clear();  if (Math.abs(mouseX - mask._xmouse) > 50 && Math.abs(mouseY - mask._ymouse) > 50){      scaleFactor = maskW / Math.abs(mask._xmouse - mouseX);      graphic._x = maskX - (mouseX - graphic._x) * scaleFactor;    graphic._y = maskY - (mouseY - graphic._y) * scaleFactor;      //scale the image by maskW / selectW    graphic._xscale *= scaleFactor;    graphic._yscale *= scaleFactor;  }}]]></SCR>			</RES>			<RES name="onReleaseOutside" type="event" eventName="onReleaseOutside" icon="graphic" erase="1" exit="0">				<SCR name="stopDrag"><![CDATA[if (mode == 'move'){  graphic.stopDrag();}if (mode == 'select'){  selecting = false;  controls.clear();  if (Math.abs(mouseX - mask._xmouse) > 50 && Math.abs(mouseY - mask._ymouse) > 50){      scaleFactor = maskW / Math.abs(mask._xmouse - mouseX);      graphic._x = maskX - (mouseX - graphic._x) * scaleFactor;    graphic._y = maskY - (mouseY - graphic._y) * scaleFactor;      //scale the image by maskW / selectW    graphic._xscale *= scaleFactor;    graphic._yscale *= scaleFactor;  }}]]></SCR>			</RES>			<RES name="onMouseMove" type="event" eventName="onMouseMove" icon="graphic" erase="1" exit="0">				<SCR name="drawRect"><![CDATA[if (mode == 'select' && selecting == true){  controls.clear();  controls.lineStyle(1,0xFFFF00,100);  controls.drawRect(mouseX,mouseY,mask._xmouse - mouseX,mask._ymouse - mouseY);}]]></SCR>			</RES>			<RES name="onKeyDown" type="event" eventName="onKeyDown" icon="rootIcon" erase="1" exit="0">				<SCR name="[Untitled]"><![CDATA[//scroll the image  if (Key.isDown(Key.DOWN)){    if (graphic._y + graphic._height > mask._y + mask._height) {      graphic._y -= 20;    }  }      if (Key.isDown(Key.UP)){    if (graphic._y <= mask._y){      graphic._y += 20;    }  }      if (Key.isDown(Key.LEFT)){    if (graphic._x < maskX){      graphic._x += 20;    }  }    if (Key.isDown(Key.RIGHT)){    if (graphic._x + graphic._width > mask._x + mask._width){      graphic._x -= 20;    }  }]]></SCR>			</RES>		</INT>		<INT id="buttons" name="buttons" perpetual="1">			<RES rs="btnMove" toolTip="{moveTip}" swf="templatePath + 'common/move.swf'" name="move" type="button" x="panel._x + 20" y="panel._y + 25" label="label" erase="1" exit="0">				<SCR name="zoomIn"><![CDATA[icon.parentNode.clip().setChecked(true,true);mode = 'move';]]></SCR>			</RES>			<RES rs="btnZoomIn" toolTip="{zoomInTip}" swf="templatePath + 'common/zoomIn.swf'" name="zoomIn" type="button" x="panel._x + 45" y="panel._y + 25" label="label" erase="1" exit="0">				<SCR name="zoomIn"><![CDATA[icon.parentNode.clip().setChecked(true,true);mode = 'zoomIn';  graphic._xscale *= 1.25;  graphic._yscale *= 1.25;  graphic._x -= (graphic._width - graphic._width*0.8) / 2;  graphic._y -= (graphic._height - graphic._height*0.8) / 2;]]></SCR>			</RES>			<RES rs="btnZoomOut" toolTip="{zoomOutTip}" swf="templatePath + 'common/zoomOut.swf'" name="zoomOut" type="button" x="panel._x + 68" y="panel._y + 25" label="label" erase="1" exit="0">				<SCR name="zoomOut"><![CDATA[icon.parentNode.clip().setChecked(true,true);mode = 'zoomOut';if (graphic._width > maskW*1.25){    graphic._xscale *= 0.8;  graphic._yscale *= 0.8;    graphic._x += (graphic._width*1.25 - graphic._width) / 2;  graphic._y += (graphic._height*1.25 - graphic._height) / 2;    if (graphic._x > maskX){    graphic._x = maskX;  }  if (graphic._y > maskY){    graphic._y = maskY;  }  if (graphic._x + graphic._width < maskX + maskW){    graphic._x = maskX + maskW - graphic._width;  }  if (graphic._y + graphic._height < maskY + maskH){    graphic._y = maskY + maskH - graphic._height;  }}]]></SCR>			</RES>			<RES rs="btnSelect" toolTip="{selectAreaTip}" swf="templatePath + 'common/select.swf'" name="selection" type="button" x="panel._x + 91" y="panel._y + 25" label="label" erase="1" exit="0">				<SCR name="select"><![CDATA[icon.parentNode.clip().setChecked(true,true);mode = 'select';]]></SCR>			</RES>			<RES rs="btnReset" toolTip="{resetImageTip}" swf="templatePath + 'common/reset.swf'" name="reset" type="button" x="panel._x + 116" y="panel._y + 25" label="label" erase="1" exit="0">				<SCR name="zoomOut"><![CDATA[if (screen == 'min'){    graphic._xscale = initScale;  graphic._yscale = initScale;  graphic._x = maskX;  graphic._y = maskY;  } else {  graphic._x = 30;  graphic._y = 30;  graphic._width = 740;  graphic._height = 740 / p;  }]]></SCR>			</RES>			<RES rs="btnToggle" toolTip="{toggleScreenTip}" swf="templatePath + 'common/toggleScreen.swf'" name="fullscreen" type="button" x="panel._x + 141" y="panel._y + 25" label="fullscreen" erase="1" exit="0">				<SCR name="toggle"><![CDATA[if (screen != 'max'){    panel._x = 20;  panel._y = 20;  panel._width = 760;  panel._height = 484;    graphic._x = 30;  graphic._y = 30;  graphic._width = 740;  graphic._height = 740 / p;  mask.clear();  mask.beginFill(0xFF0000,0);  mask.drawRect(30,30,740,464);    maskX = 30;  maskY = 30;  maskW = 740;  maskH = 464;        textBlock._visible = false;    screen = 'max';  } else {  panel._x = initX - 10;  panel._y = initY - 10;  panel._width = initW +20;  panel._height = initH +20;   graphic._x = initX;  graphic._y = initY;  graphic._width = initW;  graphic._height = initH;        mask.clear();  mask.beginFill(0xFF0000,0);  mask.drawRect(initX,initY,initW,initH);          maskX = initX;  maskY = initY;  maskW = initW;  maskH = initH;        textBlock._visible = true;    screen = 'min';}]]></SCR>			</RES>		</INT>		<SCR name="makeDragger"><![CDATA[buttons.createEmptyMovieClip('dragger',-1);buttons.dragger.beginFill(STYLES.statusBarColour,100);buttons.dragger.drawRect(btnMove._x - 5,btnMove._y - 12 ,153,10);buttons.dragger.beginFill(STYLES.titleBarColour,100);buttons.dragg.lineStyle(2,STYLES.statusBarColour, 100);buttons.dragger.drawRect(btnMove._x - 5,btnMove._y - 2 ,153,28);drg = buttons.dragger;]]></SCR>		<INT name="dragHandlers" perpetual="1">			<RES name="onPress" type="event" eventName="onPress" icon="drg" erase="1" exit="0">				<SCR name="start"><![CDATA[buttons.startDrag();]]></SCR>			</RES>			<RES name="onRelease" type="event" eventName="onRelease" icon="drg" erase="1" exit="0">				<SCR name="stop"><![CDATA[buttons.stopDrag();]]></SCR>			</RES>			<RES name="onReleaseOutside" type="event" eventName="onReleaseOutside" icon="drg" erase="1" exit="0">				<SCR name="stop"><![CDATA[buttons.stopDrag();]]></SCR>			</RES>		</INT>	</PG>