	<PG title="Chart" name="chart">		<SCR name="getPageID"><![CDATA[pageIcon = icon.parentNode.clip();if (rootIcon.projMode == "dev"){   // Page Wizard  pageIcon.templateData = pageIcon.extXML.toObject();  pageIcon.templateData = pageIcon.templateData.pageWizard[0];} else {  // Toolkits  myXML = new XML(extXML.firstChild.childNodes[rootIcon.getPageIndex() - pgOffset]);  pageIcon.templateData = myXML.toObject();}  rootIcon.setTitleText(templateData.learningObject[0].name);  // handle multiple page data definitions in a project if (rootIcon.projectPageIndex == undefined){     rootIcon.projectPageIndex = 0;}// check if this page has a definition for the current project index and default to 0 if notif (pageIcon.templateData.chart[rootIcon.projectPageIndex].name == undefined){  projPI = 0;} else {  projPI = rootIcon.projectPageIndex; }  align = pageIcon.templateData.chart[projPI].align;if (pageIcon.templateData.chart[projPI].narration != undefined){  narration = pageIcon.templateData.chart[projPI].narration;  rootIcon.broadcast('showAudio');}]]></SCR>		<DIS id="panel" h="474" w="420" tabIndex="-1" name="panel" x="align == 'left' ? 360 : 20" y="20" type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>		<DIS textColour="0x333333" name="title" x="panel._x" y="panel._y + 10" w="420" h="10" type="text"><![CDATA[{'<b><p align="center">' + pageIcon.templateData.chart[projPI].chartTitle + '</p></b>'}]]></DIS>		<DIS id="chart" name="chart" x="panel._x + 60" y="panel._y + 10" w="400" h="10" type="text"><![CDATA[]]></DIS>		<DIS id="t" scrolling="auto" name="text" x="align == 'left' ? 20 : 460" y="20" w="320" h="480" type="text"><![CDATA[{pageIcon.templateData.chart[projPI].text}]]></DIS>		<SCR name="drawChart"><![CDATA[lblFormat = new TextFormat('Verdana', 10, 0x333333);lblFormat.align = 'center';lgdFormat = new TextFormat('Verdana', 10, 0x333333);lgdFormat.align = 'left';minMaxFormat = new TextFormat('Verdana', 10, 0x333333);minMaxFormat.align = 'right';yMin = Infinity;yMax = 0;s = pageIcon.templateData.chart[projPI].series;cd = new Array();for (i = 0; i < s.length; i++){  cd.push(new Array());  temp = s[i].data.split('||');  for (j = 0; j < temp.length; j++){    cd[i].push(new Object());    cd[i][j].x = temp[j].split('|')[0];    cd[i][j].y = temp[j].split('|')[1];    if (Number(cd[i][j].y) < yMin){      yMin = cd[i][j].y;      yMin = Math.floor(yMin * 0.9);	      }    if (Number(cd[i][j].y) > yMax){      yMax = cd[i][j].y;    }  }}hMax = 440 - 30 - s.length*20;scalar = hMax / (yMax - yMin);//draw the axisif (pageIcon.templateData.chart[projPI].chartType != 'pie'){  w = 350 / cd[0].length;  w1 = w*0.9 / cd.length;    chart.lineStyle(0,0x333333,100);  chart.moveTo(0,30 + s.length*20);  chart.lineTo(0,445);  chart.moveTo(-5,440);  chart.lineTo(350,440);  chart.lineStyle();    //draw the legend  for (i = 0;i < s.length; i++){    chart.beginFill(s[i].colour, 100);    chart.drawRect(-50,25 + i*20,12,12);            chart.createTextField('lgd' + i, i, -30,25+i*20 - 3,300,20);    chart['lgd' + i].text = s[i].name;    chart['lgd' + i].setTextFormat(lgdFormat);  }    //draw the x labels  for (i = 0; i < cd[0].length; i++){    chart.createTextField('lbl' + i, i+10, w*i,442,w,20);    chart['lbl' + i].text = cd[0][i].x;    chart['lbl' + i].setTextFormat(lblFormat);  }    //draw the y lables  chart.createTextField('min', 99, -50,440 - 9,45,20);  chart.min.text = yMin;  chart.min.setTextFormat(minMaxFormat);    chart.createTextField('max', 98, -50,440 - hMax - 9,45,20);  chart.max.text = yMax;  chart.max.setTextFormat(minMaxFormat);}//debug(pageIcon.templateData.chart[projPI].chartType);//LINE------------------------------------------------if (pageIcon.templateData.chart[projPI].chartType == 'line'){  for (i = 0; i < cd.length; i++){ //for each series      chart.beginFill();    chart.lineStyle(2,s[i].colour,100);    chart.moveTo(w/2, 440 - (cd[i][0].y - yMin) * scalar);        for (j = 0; j < cd[i].length; j++){      chart.lineTo(w*j + w/2, 440 - (cd[i][j].y - yMin) * scalar);    }  }}//BAR CHARTS------------------------------------------if (pageIcon.templateData.chart[projPI].chartType == 'bar'){    for (i = 0; i < cd.length; i++){ //for each series      chart.beginFill(s[i].colour,100);        for (j = 0; j < cd[i].length; j++){      tempH = (cd[i][j].y - yMin) * scalar;      chart.drawRect(w*j + i*w1, 440,w*0.9 / s.length,-tempH);    }  }}//BAR CHARTS STACKING------------------------------------------if (pageIcon.templateData.chart[projPI].chartType == 'stacked bar'){    cumH = new Array();  for (i = 0; i < cd[0].length; i++){    cumH[i]=0;  }    maxCH = 0;  //find total colum height  for (i = 0; i < cd[0].length; i++){ //for each dimension    tempCH = 0;    for (j = 0; j < cd.length; j++){      tempCH += Number(cd[j][i].y);    }  }  if (tempCH > maxCH){    maxCH = tempCH;  }  chart.min.text = 0;  chart.min.setTextFormat(minMaxFormat);  chart.max.text = maxCH;  chart.max.setTextFormat(minMaxFormat);  scalar = hMax / maxCH;    for (i = 0; i < cd.length; i++){ //for each series      chart.beginFill(s[i].colour,100);        for (j = 0; j < cd[i].length; j++){      tempH = Number(cd[i][j].y);      chart.drawRect(w*j,440 - cumH[j] * scalar,w*0.9,-tempH*scalar);      cumH[j] += tempH;    }  }}//pie chartsif (pageIcon.templateData.chart[projPI].chartType == 'pie'){    colOff = 100 / cd[0].length;  for (i = 0;i < cd[0].length; i++){    chart.beginFill(s[0].colour, 100 - colOff*i);    chart.lineStyle(0,0x333333,100);    chart.drawRect(-50,25 + i*20,12,12);    chart.lineStyle();                  chart.createTextField('lgd' + i, i, -30,25 + i*20 - 3,150,20);    chart['lgd' + i].text = cd[0][i].x;    chart['lgd' + i].setTextFormat(lgdFormat);  }  ///draw chart  for (i = 0; i < 1; i++){ //for each series      //get the total for this series    sT = 0;    for (j = 0; j < cd[i].length; j++){      sT += Number(cd[i][j].y);    }    exTheta = 90;    for (j = 0; j < cd[i].length; j++){ //draw each segment...            theta = Number(cd[i][j].y) / sT * -360;      chart.beginFill(s[0].colour, 100 - colOff*j);      chart.drawWedge(170,260, exTheta, theta, 150 - i*(150 / s.length));      exTheta += theta;    }  }}]]></SCR>	</PG>